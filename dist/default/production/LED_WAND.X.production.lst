

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 19 12:44:28 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.45
    20                           ; Generated 16/11/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F690 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0095                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  0115                     	;# 
   115  0116                     	;# 
   116  0118                     	;# 
   117  0119                     	;# 
   118  011A                     	;# 
   119  011B                     	;# 
   120  011E                     	;# 
   121  011F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  019D                     	;# 
   125  019E                     	;# 
   126                           
   127                           	psect	idataBANK0
   128  013D                     __pidataBANK0:	
   129                           
   130                           ;initializer for _timePerSegment
   131  013D  34F4               	retlw	244
   132  013E  3401               	retlw	1
   133                           
   134                           ;initializer for _lengthOfMessage
   135  013F  3408               	retlw	8
   136  0140  3400               	retlw	0
   137  0010                     _T1CONbits	set	16
   138  0010                     _T1CON	set	16
   139  000E                     _TMR1L	set	14
   140  000F                     _TMR1H	set	15
   141  000B                     _INTCONbits	set	11
   142  000D                     _PIR2bits	set	13
   143  0007                     _PORTC	set	7
   144  008D                     _PIE2bits	set	141
   145  0087                     _TRISC	set	135
   146  0085                     _TRISAbits	set	133
   147  0119                     _CM1CON0bits	set	281
   148  0118                     _VRCON	set	280
   149  0119                     _CM1CON0	set	281
   150  011F                     _ANSELH	set	287
   151  011E                     _ANSEL	set	286
   152                           
   153                           ; #config settings
   154  0000                     
   155                           	psect	cinit
   156  0013                     start_initialization:	
   157  0013                     __initialization:	
   158                           
   159                           ; Initialize objects allocated to BANK0
   160  0013  118A  213D  118A   	fcall	__pidataBANK0	;fetch initializer
   161  0016  00CE               	movwf	__pdataBANK0& (0+127)
   162  0017  118A  213E  118A   	fcall	__pidataBANK0+1	;fetch initializer
   163  001A  00CF               	movwf	(__pdataBANK0+1)& (0+127)
   164  001B  118A  213F  118A   	fcall	__pidataBANK0+2	;fetch initializer
   165  001E  00D0               	movwf	(__pdataBANK0+2)& (0+127)
   166  001F  118A  2140  118A   	fcall	__pidataBANK0+3	;fetch initializer
   167  0022  00D1               	movwf	(__pdataBANK0+3)& (0+127)
   168                           
   169                           ; Clear objects allocated to BANK0
   170  0023  1383               	bcf	3,7	;select IRP bank0
   171  0024  3020               	movlw	low __pbssBANK0
   172  0025  0084               	movwf	4
   173  0026  3047               	movlw	low (__pbssBANK0+39)
   174  0027  118A  2135  118A   	fcall	clear_ram0
   175                           
   176                           ; Clear objects allocated to COMMON
   177  002A  3070               	movlw	low __pbssCOMMON
   178  002B  0084               	movwf	4
   179  002C  3076               	movlw	low (__pbssCOMMON+6)
   180  002D  118A  2135         	fcall	clear_ram0
   181  002F                     end_of_initialization:	
   182                           ;End of C runtime variable initialization code
   183                           
   184  002F                     __end_of__initialization:	
   185  002F  0183               	clrf	3
   186  0030  118A  2832         	ljmp	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMMON
   189  0070                     __pbssCOMMON:	
   190  0070                     _lastInterruptTriggerTime:	
   191  0070                     	ds	2
   192  0072                     _durationOfSwingBackAndForth:	
   193  0072                     	ds	2
   194  0074                     _delayingVariable:	
   195  0074                     	ds	2
   196                           
   197                           	psect	bssBANK0
   198  0020                     __pbssBANK0:	
   199  0020                     _letterSegments:	
   200  0020                     	ds	25
   201  0039                     _recentDurations:	
   202  0039                     	ds	10
   203  0043                     _count:	
   204  0043                     	ds	2
   205  0045                     _isSequenceRunning:	
   206  0045                     	ds	2
   207                           
   208                           	psect	dataBANK0
   209  004E                     __pdataBANK0:	
   210  004E                     _timePerSegment:	
   211  004E                     	ds	2
   212  0050                     _lengthOfMessage:	
   213  0050                     	ds	2
   214                           
   215                           	psect	clrtext
   216  0135                     clear_ram0:	
   217                           ;	Called with FSR containing the base address, and
   218                           ;	W with the last address+1
   219                           
   220  0135  0064               	clrwdt	;clear the watchdog before getting into this loop
   221  0136                     clrloop0:	
   222  0136  0180               	clrf	0	;clear RAM location pointed to by FSR
   223  0137  0A84               	incf	4,f	;increment pointer
   224  0138  0604               	xorwf	4,w	;XOR with final address
   225  0139  1903               	btfsc	3,2	;have we reached the end yet?
   226  013A  3400               	retlw	0	;all done for this memory range, return
   227  013B  0604               	xorwf	4,w	;XOR again to restore value
   228  013C  2936               	goto	clrloop0	;do the next byte
   229                           
   230                           	psect	cstackCOMMON
   231  0076                     __pcstackCOMMON:	
   232  0076                     ?_runLEDSequence:	
   233  0076                     ?_ISR:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0076                     ??_ISR:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0076                     ?_main:	
   240                           ; 1 bytes @ 0x0
   241                           
   242                           
   243                           ; 2 bytes @ 0x0
   244  0076                     	ds	4
   245  007A                     ISR@duration:	
   246                           
   247                           ; 2 bytes @ 0x4
   248  007A                     	ds	2
   249                           
   250                           	psect	cstackBANK0
   251  0047                     __pcstackBANK0:	
   252  0047                     ?_delay:	
   253  0047                     delay@delayTime:	
   254                           ; 1 bytes @ 0x0
   255                           
   256                           
   257                           ; 2 bytes @ 0x0
   258  0047                     	ds	2
   259  0049                     ??_runLEDSequence:	
   260  0049                     ??_delay:	
   261                           ; 1 bytes @ 0x2
   262                           
   263  0049                     runLEDSequence@i:	
   264                           ; 1 bytes @ 0x2
   265                           
   266                           
   267                           ; 2 bytes @ 0x2
   268  0049                     	ds	2
   269  004B                     ??_main:	
   270                           
   271                           ; 1 bytes @ 0x4
   272  004B                     	ds	3
   273                           
   274                           	psect	maintext
   275  0032                     __pmaintext:	
   276 ;;
   277 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   278 ;;
   279 ;; *************** function _main *****************
   280 ;; Defined at:
   281 ;;		line 46 in file "interrupt_wand.c"
   282 ;; Parameters:    Size  Location     Type
   283 ;;		None
   284 ;; Auto vars:     Size  Location     Type
   285 ;;		None
   286 ;; Return value:  Size  Location     Type
   287 ;;                  2   58[None  ] int 
   288 ;; Registers used:
   289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   290 ;; Tracked objects:
   291 ;;		On entry : B00/0
   292 ;;		On exit  : 0/0
   293 ;;		Unchanged: 0/0
   294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   295 ;;      Params:         0       0       0       0
   296 ;;      Locals:         0       0       0       0
   297 ;;      Temps:          0       3       0       0
   298 ;;      Totals:         0       3       0       0
   299 ;;Total ram usage:        3 bytes
   300 ;; Hardware stack levels required when called:    3
   301 ;; This function calls:
   302 ;;		_runLEDSequence
   303 ;; This function is called by:
   304 ;;		Startup code after reset
   305 ;; This function uses a non-reentrant model
   306 ;;
   307                           
   308                           
   309                           ;psect for function _main
   310  0032                     _main:	
   311                           
   312                           ;interrupt_wand.c: 48: ANSEL = 0b00000010;
   313                           
   314                           ;incstack = 0
   315                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   316  0032  3002               	movlw	2
   317  0033  1283               	bcf	3,5	;RP0=0, select bank2
   318  0034  1703               	bsf	3,6	;RP1=1, select bank2
   319  0035  009E               	movwf	30	;volatile
   320                           
   321                           ;interrupt_wand.c: 49: ANSELH = 0;
   322  0036  019F               	clrf	31	;volatile
   323                           
   324                           ;interrupt_wand.c: 50: TRISAbits.TRISA1 = 1;
   325  0037  1683               	bsf	3,5	;RP0=1, select bank1
   326  0038  1303               	bcf	3,6	;RP1=0, select bank1
   327  0039  1485               	bsf	5,1	;volatile
   328                           
   329                           ;interrupt_wand.c: 51: TRISC = 0;
   330  003A  0187               	clrf	7	;volatile
   331                           
   332                           ;interrupt_wand.c: 52: PORTC = 0;
   333  003B  1283               	bcf	3,5	;RP0=0, select bank0
   334  003C  1303               	bcf	3,6	;RP1=0, select bank0
   335  003D  0187               	clrf	7	;volatile
   336                           
   337                           ;interrupt_wand.c: 57: CM1CON0 = 0b10000100;
   338  003E  3084               	movlw	132
   339  003F  1283               	bcf	3,5	;RP0=0, select bank2
   340  0040  1703               	bsf	3,6	;RP1=1, select bank2
   341  0041  0099               	movwf	25	;volatile
   342                           
   343                           ;interrupt_wand.c: 58: VRCON = 0b10101011;
   344  0042  30AB               	movlw	171
   345  0043  0098               	movwf	24	;volatile
   346                           
   347                           ;interrupt_wand.c: 59: PIE2bits.C1IE = 1;
   348  0044  1683               	bsf	3,5	;RP0=1, select bank1
   349  0045  1303               	bcf	3,6	;RP1=0, select bank1
   350  0046  168D               	bsf	13,5	;volatile
   351                           
   352                           ;interrupt_wand.c: 60: PIR2bits.C1IF = 0;
   353  0047  1283               	bcf	3,5	;RP0=0, select bank0
   354  0048  1303               	bcf	3,6	;RP1=0, select bank0
   355  0049  128D               	bcf	13,5	;volatile
   356                           
   357                           ;interrupt_wand.c: 61: INTCONbits.PEIE = 1;
   358  004A  170B               	bsf	11,6	;volatile
   359                           
   360                           ;interrupt_wand.c: 63: _delay((unsigned long)((1000)*(1000000/4000.0)));
   361  004B  3002               	movlw	2
   362  004C  1283               	bcf	3,5	;RP0=0, select bank0
   363  004D  1303               	bcf	3,6	;RP1=0, select bank0
   364  004E  00CD               	movwf	??_main+2
   365  004F  3045               	movlw	69
   366  0050  00CC               	movwf	??_main+1
   367  0051  30A9               	movlw	169
   368  0052  00CB               	movwf	??_main
   369  0053                     u247:	
   370  0053  0BCB               	decfsz	??_main,f
   371  0054  2853               	goto	u247
   372  0055  0BCC               	decfsz	??_main+1,f
   373  0056  2853               	goto	u247
   374  0057  0BCD               	decfsz	??_main+2,f
   375  0058  2853               	goto	u247
   376  0059  0000               	nop
   377                           
   378                           ;interrupt_wand.c: 65: INTCONbits.GIE = 1;
   379  005A  178B               	bsf	11,7	;volatile
   380                           
   381                           ;interrupt_wand.c: 68: letterSegments[0] = 0b11111111;
   382  005B  30FF               	movlw	255
   383  005C  1283               	bcf	3,5	;RP0=0, select bank0
   384  005D  1303               	bcf	3,6	;RP1=0, select bank0
   385  005E  00CB               	movwf	??_main
   386  005F  084B               	movf	??_main,w
   387  0060  00A0               	movwf	_letterSegments
   388                           
   389                           ;interrupt_wand.c: 69: letterSegments[1] = 0b00001000;
   390  0061  3008               	movlw	8
   391  0062  00CB               	movwf	??_main
   392  0063  084B               	movf	??_main,w
   393  0064  00A1               	movwf	_letterSegments+1
   394                           
   395                           ;interrupt_wand.c: 70: letterSegments[2] = 0b11111111;
   396  0065  30FF               	movlw	255
   397  0066  00CB               	movwf	??_main
   398  0067  084B               	movf	??_main,w
   399  0068  00A2               	movwf	_letterSegments+2
   400                           
   401                           ;interrupt_wand.c: 73: letterSegments[3] = 0b00000000;
   402  0069  01A3               	clrf	_letterSegments+3
   403                           
   404                           ;interrupt_wand.c: 74: letterSegments[4] = 0b00000000;
   405  006A  01A4               	clrf	_letterSegments+4
   406                           
   407                           ;interrupt_wand.c: 77: letterSegments[5] = 0b11111111;
   408  006B  30FF               	movlw	255
   409  006C  00CB               	movwf	??_main
   410  006D  084B               	movf	??_main,w
   411  006E  00A5               	movwf	_letterSegments+5
   412                           
   413                           ;interrupt_wand.c: 78: letterSegments[6] = 0b10010001;
   414  006F  3091               	movlw	145
   415  0070  00CB               	movwf	??_main
   416  0071  084B               	movf	??_main,w
   417  0072  00A6               	movwf	_letterSegments+6
   418                           
   419                           ;interrupt_wand.c: 79: letterSegments[7] = 0b10010001;
   420  0073  3091               	movlw	145
   421  0074  00CB               	movwf	??_main
   422  0075  084B               	movf	??_main,w
   423  0076  00A7               	movwf	_letterSegments+7
   424                           
   425                           ;interrupt_wand.c: 82: letterSegments[8] = 0b00000000;
   426  0077  01A8               	clrf	_letterSegments+8
   427                           
   428                           ;interrupt_wand.c: 83: letterSegments[9] = 0b00000000;
   429  0078  01A9               	clrf	_letterSegments+9
   430                           
   431                           ;interrupt_wand.c: 86: letterSegments[10] = 0b11111111;
   432  0079  30FF               	movlw	255
   433  007A  00CB               	movwf	??_main
   434  007B  084B               	movf	??_main,w
   435  007C  00AA               	movwf	_letterSegments+10
   436                           
   437                           ;interrupt_wand.c: 87: letterSegments[11] = 0b10000000;
   438  007D  3080               	movlw	128
   439  007E  00CB               	movwf	??_main
   440  007F  084B               	movf	??_main,w
   441  0080  00AB               	movwf	_letterSegments+11
   442                           
   443                           ;interrupt_wand.c: 88: letterSegments[12] = 0b10000000;
   444  0081  3080               	movlw	128
   445  0082  00CB               	movwf	??_main
   446  0083  084B               	movf	??_main,w
   447  0084  00AC               	movwf	_letterSegments+12
   448                           
   449                           ;interrupt_wand.c: 91: letterSegments[13] = 0b00000000;
   450  0085  01AD               	clrf	_letterSegments+13
   451                           
   452                           ;interrupt_wand.c: 92: letterSegments[14] = 0b00000000;
   453  0086  01AE               	clrf	_letterSegments+14
   454                           
   455                           ;interrupt_wand.c: 95: letterSegments[15] = 0b11111111;
   456  0087  30FF               	movlw	255
   457  0088  00CB               	movwf	??_main
   458  0089  084B               	movf	??_main,w
   459  008A  00AF               	movwf	_letterSegments+15
   460                           
   461                           ;interrupt_wand.c: 96: letterSegments[16] = 0b10000000;
   462  008B  3080               	movlw	128
   463  008C  00CB               	movwf	??_main
   464  008D  084B               	movf	??_main,w
   465  008E  00B0               	movwf	_letterSegments+16
   466                           
   467                           ;interrupt_wand.c: 97: letterSegments[17] = 0b10000000;
   468  008F  3080               	movlw	128
   469  0090  00CB               	movwf	??_main
   470  0091  084B               	movf	??_main,w
   471  0092  00B1               	movwf	_letterSegments+17
   472                           
   473                           ;interrupt_wand.c: 108: TMR1H = 0;
   474  0093  018F               	clrf	15	;volatile
   475                           
   476                           ;interrupt_wand.c: 109: TMR1L = 0;
   477  0094  018E               	clrf	14	;volatile
   478                           
   479                           ;interrupt_wand.c: 110: T1CON = 0b10110001;
   480  0095  30B1               	movlw	177
   481  0096  0090               	movwf	16	;volatile
   482  0097                     l869:	
   483                           ;interrupt_wand.c: 112: while (1) {
   484                           
   485                           
   486                           ;interrupt_wand.c: 113: if (isSequenceRunning) {
   487  0097  0845               	movf	_isSequenceRunning,w
   488  0098  0446               	iorwf	_isSequenceRunning+1,w
   489  0099  1903               	btfsc	3,2
   490  009A  2897               	goto	l869
   491                           
   492                           ;interrupt_wand.c: 115: runLEDSequence();
   493  009B  118A  20F8  118A   	fcall	_runLEDSequence
   494                           
   495                           ;interrupt_wand.c: 117: if (isSequenceRunning) {
   496  009E  1283               	bcf	3,5	;RP0=0, select bank0
   497  009F  1303               	bcf	3,6	;RP1=0, select bank0
   498  00A0  0845               	movf	_isSequenceRunning,w
   499  00A1  0446               	iorwf	_isSequenceRunning+1,w
   500  00A2  1903               	btfsc	3,2
   501  00A3  28A7               	goto	l877
   502                           
   503                           ;interrupt_wand.c: 118: isSequenceRunning = 0;
   504  00A4  01C5               	clrf	_isSequenceRunning
   505  00A5  01C6               	clrf	_isSequenceRunning+1
   506                           
   507                           ;interrupt_wand.c: 119: }
   508  00A6  2897               	goto	l869
   509  00A7                     l877:	
   510                           
   511                           ;interrupt_wand.c: 120: else {
   512                           ;interrupt_wand.c: 121: isSequenceRunning = 1;
   513  00A7  3001               	movlw	1
   514  00A8  00C5               	movwf	_isSequenceRunning
   515  00A9  3000               	movlw	0
   516  00AA  00C6               	movwf	_isSequenceRunning+1
   517                           
   518                           ;interrupt_wand.c: 122: timePerSegment = 500;
   519  00AB  30F4               	movlw	244
   520  00AC  00CE               	movwf	_timePerSegment
   521  00AD  3001               	movlw	1
   522  00AE  00CF               	movwf	_timePerSegment+1
   523  00AF  2897               	goto	l869
   524  00B0                     __end_of_main:	
   525                           ;interrupt_wand.c: 123: }
   526                           ;interrupt_wand.c: 125: }
   527                           ;interrupt_wand.c: 126: }
   528                           ;interrupt_wand.c: 128: return 0;
   529                           ;	Return value of _main is never used
   530                           
   531                           
   532                           	psect	text1
   533  00F8                     __ptext1:	
   534 ;; *************** function _runLEDSequence *****************
   535 ;; Defined at:
   536 ;;		line 178 in file "interrupt_wand.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  i               2    2[BANK0 ] int 
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   550 ;;      Params:         0       0       0       0
   551 ;;      Locals:         0       2       0       0
   552 ;;      Temps:          0       0       0       0
   553 ;;      Totals:         0       2       0       0
   554 ;;Total ram usage:        2 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; Hardware stack levels required when called:    2
   557 ;; This function calls:
   558 ;;		_delay
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           
   565                           ;psect for function _runLEDSequence
   566  00F8                     _runLEDSequence:	
   567                           
   568                           ;interrupt_wand.c: 180: for (int i = lengthOfMessage - 1; i >= 0; i--) {
   569                           
   570                           ;incstack = 0
   571                           ; Regs used in _runLEDSequence: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   572  00F8  1283               	bcf	3,5	;RP0=0, select bank0
   573  00F9  1303               	bcf	3,6	;RP1=0, select bank0
   574  00FA  0850               	movf	_lengthOfMessage,w
   575  00FB  3EFF               	addlw	255
   576  00FC  00C9               	movwf	runLEDSequence@i
   577  00FD  0851               	movf	_lengthOfMessage+1,w
   578  00FE  1803               	skipnc
   579  00FF  3E01               	addlw	1
   580  0100  3EFF               	addlw	255
   581  0101  00CA               	movwf	runLEDSequence@i+1
   582  0102  1BCA               	btfsc	runLEDSequence@i+1,7
   583  0103  291B               	goto	l809
   584  0104                     l801:	
   585                           
   586                           ;interrupt_wand.c: 181: PORTC = letterSegments[i];
   587  0104  0849               	movf	runLEDSequence@i,w
   588  0105  3E20               	addlw	(low (_letterSegments| 0))& (0+255)
   589  0106  0084               	movwf	4
   590  0107  1383               	bcf	3,7	;select IRP bank0
   591  0108  0800               	movf	0,w
   592  0109  0087               	movwf	7	;volatile
   593                           
   594                           ;interrupt_wand.c: 183: delay(timePerSegment);
   595  010A  084F               	movf	_timePerSegment+1,w
   596  010B  00C8               	movwf	delay@delayTime+1
   597  010C  084E               	movf	_timePerSegment,w
   598  010D  00C7               	movwf	delay@delayTime
   599  010E  118A  211D  118A   	fcall	_delay
   600  0111  30FF               	movlw	255
   601  0112  1283               	bcf	3,5	;RP0=0, select bank0
   602  0113  1303               	bcf	3,6	;RP1=0, select bank0
   603  0114  07C9               	addwf	runLEDSequence@i,f
   604  0115  1803               	skipnc
   605  0116  0ACA               	incf	runLEDSequence@i+1,f
   606  0117  30FF               	movlw	255
   607  0118  07CA               	addwf	runLEDSequence@i+1,f
   608  0119  1FCA               	btfss	runLEDSequence@i+1,7
   609  011A  2904               	goto	l801
   610  011B                     l809:	
   611                           
   612                           ;interrupt_wand.c: 184: }
   613                           ;interrupt_wand.c: 193: PORTC = 0;
   614  011B  0187               	clrf	7	;volatile
   615  011C  0008               	return
   616  011D                     __end_of_runLEDSequence:	
   617                           
   618                           	psect	text2
   619  011D                     __ptext2:	
   620 ;; *************** function _delay *****************
   621 ;; Defined at:
   622 ;;		line 196 in file "interrupt_wand.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  delayTime       2    0[BANK0 ] int 
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, btemp+1
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   636 ;;      Params:         0       2       0       0
   637 ;;      Locals:         0       0       0       0
   638 ;;      Temps:          0       0       0       0
   639 ;;      Totals:         0       2       0       0
   640 ;;Total ram usage:        2 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    1
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		_runLEDSequence
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           
   651                           ;psect for function _delay
   652  011D                     _delay:	
   653                           
   654                           ;interrupt_wand.c: 197: for (delayingVariable = delayTime; delayingVariable > 0; delayin
      +                          gVariable--) {}
   655                           
   656                           ;incstack = 0
   657                           ; Regs used in _delay: [wreg+btemp+1]
   658  011D  1283               	bcf	3,5	;RP0=0, select bank0
   659  011E  1303               	bcf	3,6	;RP1=0, select bank0
   660  011F  0848               	movf	delay@delayTime+1,w
   661  0120  00F5               	movwf	_delayingVariable+1
   662  0121  0847               	movf	delay@delayTime,w
   663  0122  00F4               	movwf	_delayingVariable
   664  0123                     l793:	
   665  0123  0875               	movf	_delayingVariable+1,w
   666  0124  3A80               	xorlw	128
   667  0125  00FF               	movwf	127
   668  0126  3080               	movlw	128
   669  0127  027F               	subwf	127,w
   670  0128  1D03               	skipz
   671  0129  292C               	goto	u195
   672  012A  3001               	movlw	1
   673  012B  0274               	subwf	_delayingVariable,w
   674  012C                     u195:	
   675  012C  1C03               	btfss	3,0
   676  012D  0008               	return
   677  012E  30FF               	movlw	255
   678  012F  07F4               	addwf	_delayingVariable,f
   679  0130  1803               	skipnc
   680  0131  0AF5               	incf	_delayingVariable+1,f
   681  0132  30FF               	movlw	255
   682  0133  07F5               	addwf	_delayingVariable+1,f
   683  0134  2923               	goto	l793
   684  0135                     __end_of_delay:	
   685                           
   686                           	psect	text3
   687  00B0                     __ptext3:	
   688 ;; *************** function _ISR *****************
   689 ;; Defined at:
   690 ;;		line 131 in file "interrupt_wand.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  duration        2    4[COMMON] int 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0, btemp+1
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   704 ;;      Params:         0       0       0       0
   705 ;;      Locals:         2       0       0       0
   706 ;;      Temps:          4       0       0       0
   707 ;;      Totals:         6       0       0       0
   708 ;;Total ram usage:        6 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; This function calls:
   711 ;;		Nothing
   712 ;; This function is called by:
   713 ;;		Interrupt level 1
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           
   718                           ;psect for function _ISR
   719  00B0                     _ISR:	
   720                           
   721                           ;interrupt_wand.c: 138: if (CM1CON0bits.C1OUT == 0 && VRCON == 0b10101011) {
   722  00B0  1283               	bcf	3,5	;RP0=0, select bank2
   723  00B1  1703               	bsf	3,6	;RP1=1, select bank2
   724  00B2  1B19               	btfsc	25,6	;volatile
   725  00B3  28EA               	goto	i1l787
   726  00B4  30AB               	movlw	171
   727  00B5  0618               	xorwf	24,w	;volatile
   728  00B6  1D03               	btfss	3,2
   729  00B7  28EA               	goto	i1l787
   730                           
   731                           ;interrupt_wand.c: 140: T1CONbits.TMR1ON = 0;
   732  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   733  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   734  00BA  1010               	bcf	16,0	;volatile
   735                           
   736                           ;interrupt_wand.c: 141: int duration = TMR1L + (256 * TMR1H);
   737  00BB  080F               	movf	15,w	;volatile
   738  00BC  00FB               	movwf	ISR@duration+1
   739  00BD  080E               	movf	14,w	;volatile
   740  00BE  00FA               	movwf	ISR@duration
   741                           
   742                           ;interrupt_wand.c: 142: T1CONbits.TMR1ON = 1;
   743  00BF  1410               	bsf	16,0	;volatile
   744                           
   745                           ;interrupt_wand.c: 144: if (duration > 15000) {
   746  00C0  087B               	movf	ISR@duration+1,w
   747  00C1  3A80               	xorlw	128
   748  00C2  00FF               	movwf	127
   749  00C3  30BA               	movlw	186
   750  00C4  027F               	subwf	127,w
   751  00C5  1D03               	skipz
   752  00C6  28C9               	goto	u17_25
   753  00C7  3099               	movlw	153
   754  00C8  027A               	subwf	ISR@duration,w
   755  00C9                     u17_25:	
   756  00C9  1C03               	skipc
   757  00CA  28EA               	goto	i1l787
   758                           
   759                           ;interrupt_wand.c: 149: if (isSequenceRunning) {
   760  00CB  1283               	bcf	3,5	;RP0=0, select bank0
   761  00CC  1303               	bcf	3,6	;RP1=0, select bank0
   762  00CD  0845               	movf	_isSequenceRunning,w
   763  00CE  0446               	iorwf	_isSequenceRunning+1,w
   764  00CF  1903               	btfsc	3,2
   765  00D0  28DE               	goto	i1l777
   766                           
   767                           ;interrupt_wand.c: 150: timePerSegment = 0;
   768  00D1  01CE               	clrf	_timePerSegment
   769  00D2  01CF               	clrf	_timePerSegment+1
   770                           
   771                           ;interrupt_wand.c: 151: delayingVariable = 1;
   772  00D3  3001               	movlw	1
   773  00D4  00F4               	movwf	_delayingVariable
   774  00D5  3000               	movlw	0
   775  00D6  00F5               	movwf	_delayingVariable+1
   776                           
   777                           ;interrupt_wand.c: 152: isSequenceRunning = 0;
   778  00D7  01C5               	clrf	_isSequenceRunning
   779  00D8  01C6               	clrf	_isSequenceRunning+1
   780                           
   781                           ;interrupt_wand.c: 153: durationOfSwingBackAndForth = duration;
   782  00D9  087B               	movf	ISR@duration+1,w
   783  00DA  00F3               	movwf	_durationOfSwingBackAndForth+1
   784  00DB  087A               	movf	ISR@duration,w
   785  00DC  00F2               	movwf	_durationOfSwingBackAndForth
   786                           
   787                           ;interrupt_wand.c: 154: }
   788  00DD  28E6               	goto	i1l779
   789  00DE                     i1l777:	
   790                           
   791                           ;interrupt_wand.c: 155: else {
   792                           ;interrupt_wand.c: 156: timePerSegment = 500;
   793  00DE  30F4               	movlw	244
   794  00DF  00CE               	movwf	_timePerSegment
   795  00E0  3001               	movlw	1
   796  00E1  00CF               	movwf	_timePerSegment+1
   797                           
   798                           ;interrupt_wand.c: 157: isSequenceRunning = 1;
   799  00E2  3001               	movlw	1
   800  00E3  00C5               	movwf	_isSequenceRunning
   801  00E4  3000               	movlw	0
   802  00E5  00C6               	movwf	_isSequenceRunning+1
   803  00E6                     i1l779:	
   804                           
   805                           ;interrupt_wand.c: 158: }
   806                           ;interrupt_wand.c: 160: T1CONbits.TMR1ON = 0;
   807  00E6  1010               	bcf	16,0	;volatile
   808                           
   809                           ;interrupt_wand.c: 161: TMR1H = 0;
   810  00E7  018F               	clrf	15	;volatile
   811                           
   812                           ;interrupt_wand.c: 162: TMR1L = 0;
   813  00E8  018E               	clrf	14	;volatile
   814                           
   815                           ;interrupt_wand.c: 163: T1CONbits.TMR1ON = 1;
   816  00E9  1410               	bsf	16,0	;volatile
   817  00EA                     i1l787:	
   818                           
   819                           ;interrupt_wand.c: 166: }
   820                           ;interrupt_wand.c: 173: }
   821                           ;interrupt_wand.c: 175: PIR2bits.C1IF = 0;
   822  00EA  1283               	bcf	3,5	;RP0=0, select bank0
   823  00EB  1303               	bcf	3,6	;RP1=0, select bank0
   824  00EC  128D               	bcf	13,5	;volatile
   825  00ED  0879               	movf	??_ISR+3,w
   826  00EE  00FF               	movwf	127
   827  00EF  0878               	movf	??_ISR+2,w
   828  00F0  008A               	movwf	10
   829  00F1  0877               	movf	??_ISR+1,w
   830  00F2  0084               	movwf	4
   831  00F3  0E76               	swapf	??_ISR^(0+-128),w
   832  00F4  0083               	movwf	3
   833  00F5  0EFE               	swapf	126,f
   834  00F6  0E7E               	swapf	126,w
   835  00F7  0009               	retfie
   836  00F8                     __end_of_ISR:	
   837  007E                     btemp	set	126	;btemp
   838  007E                     wtemp0	set	126
   839                           
   840                           	psect	intentry
   841  0004                     __pintentry:	
   842                           ;incstack = 0
   843                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1]
   844                           
   845  0004                     interrupt_function:	
   846  007E                     saved_w	set	btemp
   847  0004  00FE               	movwf	btemp
   848  0005  0E03               	swapf	3,w
   849  0006  00F6               	movwf	??_ISR
   850  0007  0804               	movf	4,w
   851  0008  00F7               	movwf	??_ISR+1
   852  0009  080A               	movf	10,w
   853  000A  00F8               	movwf	??_ISR+2
   854  000B  1283               	bcf	3,5	;RP0=0, select bank0
   855  000C  1303               	bcf	3,6	;RP1=0, select bank0
   856  000D  087F               	movf	btemp+1,w
   857  000E  00F9               	movwf	??_ISR+3
   858  000F  118A  28B0         	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80      7      50
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_runLEDSequence
    _runLEDSequence->_delay

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     195
                                              4 BANK0      3     3      0
                     _runLEDSequence
 ---------------------------------------------------------------------------------
 (1) _runLEDSequence                                       2     2      0     195
                                              2 BANK0      2     2      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                2     0      2      96
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0      45
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _runLEDSequence
     _delay

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       5        0.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      7      32       3       62.5%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E      10        0.0%
ABS                  0      0      3E       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 19 12:44:28 2018

                         fsr 0004                          l801 0104                          l809 011B  
                        l793 0123                          l877 00A7                          l869 0097  
                        u247 0053                          u195 012C                          _ISR 00B0  
                        fsr0 0004                          indf 0000                         ?_ISR 0076  
                       _main 0032                         btemp 007E                         start 0011  
                      ??_ISR 0076                        ?_main 0076                __CFG_WDTE$OFF 0000  
                      _ANSEL 011E                        _T1CON 0010                        i1l777 00DE  
                      i1l779 00E6                        i1l787 00EA                        _TMR1H 000F  
                      u17_25 00C9                        _TMR1L 000E                        _PORTC 0007  
                      _TRISC 0087                        _VRCON 0118                        _delay 011D  
                      _count 0043               __CFG_BOREN$OFF 0000                        pclath 000A  
                      status 0003                        wtemp0 007E               __CFG_MCLRE$OFF 0000  
            __initialization 0013            _isSequenceRunning 0045                 __end_of_main 00B0  
                     ??_main 004B                       ?_delay 0047      __size_of_runLEDSequence 0025  
                     _ANSELH 011F                       saved_w 007E      __end_of__initialization 002F  
             __pcstackCOMMON 0076                 __pidataBANK0 013D                __end_of_delay 0135  
           _delayingVariable 0074     _lastInterruptTriggerTime 0070                  ISR@duration 007A  
                    ??_delay 0049                   __pbssBANK0 0020                   __pmaintext 0032  
                 __pintentry 0004                      _CM1CON0 0119               _runLEDSequence 00F8  
                    __ptext1 00F8                      __ptext2 011D                      __ptext3 00B0  
               __size_of_ISR 0048                    _T1CONbits 0010       __end_of_runLEDSequence 011D  
                    clrloop0 0136         end_of_initialization 002F  _durationOfSwingBackAndForth 0072  
             _timePerSegment 004E                    _TRISAbits 0085              ?_runLEDSequence 0076  
                _CM1CON0bits 0119          start_initialization 0013                  __end_of_ISR 00F8  
            runLEDSequence@i 0049                  __pdataBANK0 004E                  __pbssCOMMON 0070  
                  ___latbits 0001                __pcstackBANK0 0047               __size_of_delay 0018  
          interrupt_function 0004                    clear_ram0 0135                     _PIE2bits 008D  
                   _PIR2bits 000D              _recentDurations 0039             ??_runLEDSequence 0049  
             delay@delayTime 0047               _letterSegments 0020                __size_of_main 007E  
                 _INTCONbits 000B              _lengthOfMessage 0050                     intlevel1 0000  
          __CFG_FOSC$INTRCIO 0000  
