

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 19 16:04:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F690 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0115                     	;# 
   123  0116                     	;# 
   124  0118                     	;# 
   125  0119                     	;# 
   126  011A                     	;# 
   127  011B                     	;# 
   128  011E                     	;# 
   129  011F                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  019D                     	;# 
   133  019E                     	;# 
   134                           
   135                           	psect	idataBANK1
   136  0627                     __pidataBANK1:	
   137                           
   138                           ;initializer for _timePerSegment
   139  0627  3464               	retlw	100
   140  0628  3400               	retlw	0
   141                           
   142                           	psect	nvBANK1
   143  00D8                     __pnvBANK1:	
   144  00D8                     _lengthOfMessageString:	
   145  00D8                     	ds	2
   146  0010                     _T1CONbits	set	16
   147  0010                     _T1CON	set	16
   148  000E                     _TMR1L	set	14
   149  000F                     _TMR1H	set	15
   150  000B                     _INTCONbits	set	11
   151  000D                     _PIR2bits	set	13
   152  0007                     _PORTC	set	7
   153  008D                     _PIE2bits	set	141
   154  0087                     _TRISC	set	135
   155  0085                     _TRISAbits	set	133
   156  0119                     _CM1CON0bits	set	281
   157  0118                     _VRCON	set	280
   158  0119                     _CM1CON0	set	281
   159  011F                     _ANSELH	set	287
   160  011E                     _ANSEL	set	286
   161                           
   162                           ; #config settings
   163  0000                     
   164                           	psect	cinit
   165  0013                     start_initialization:	
   166  0013                     __initialization:	
   167                           
   168                           ; Initialize objects allocated to BANK1
   169  0013  1683               	bsf	3,5	;RP0=1, select bank1
   170  0014  1303               	bcf	3,6	;RP1=0, select bank1
   171  0015  118A  2627  118A   	fcall	__pidataBANK1	;fetch initializer
   172  0018  00DA               	movwf	__pdataBANK1& (0+127)
   173  0019  118A  2628  118A   	fcall	__pidataBANK1+1	;fetch initializer
   174  001C  00DB               	movwf	(__pdataBANK1+1)& (0+127)
   175                           
   176                           ; Clear objects allocated to BANK1
   177  001D  1383               	bcf	3,7	;select IRP bank0
   178  001E  30A0               	movlw	low __pbssBANK1
   179  001F  0084               	movwf	4
   180  0020  30D0               	movlw	low (__pbssBANK1+48)
   181  0021  118A  261F         	fcall	clear_ram0
   182                           
   183                           ; Clear objects allocated to BANK0
   184  0023  1283               	bcf	3,5	;RP0=0, select bank0
   185  0024  1303               	bcf	3,6	;RP1=0, select bank0
   186  0025  01D4               	clrf	__pbssBANK0& (0+127)
   187  0026  01D5               	clrf	(__pbssBANK0+1)& (0+127)
   188  0027                     end_of_initialization:	
   189                           ;End of C runtime variable initialization code
   190                           
   191  0027                     __end_of__initialization:	
   192  0027  0183               	clrf	3
   193  0028  118A  2D56         	ljmp	_main	;jump to C main() function
   194                           
   195                           	psect	bssBANK0
   196  0054                     __pbssBANK0:	
   197  0054                     _lengthOfMessage:	
   198  0054                     	ds	2
   199                           
   200                           	psect	bssBANK1
   201  00A0                     __pbssBANK1:	
   202  00A0                     _letterSegments:	
   203  00A0                     	ds	35
   204  00C3                     _messageString:	
   205  00C3                     	ds	9
   206  00CC                     _isSequenceRunning:	
   207  00CC                     	ds	2
   208  00CE                     _delayingVariable:	
   209  00CE                     	ds	2
   210                           
   211                           	psect	dataBANK1
   212  00DA                     __pdataBANK1:	
   213  00DA                     _timePerSegment:	
   214  00DA                     	ds	2
   215                           
   216                           	psect	clrtext
   217  061F                     clear_ram0:	
   218                           ;	Called with FSR containing the base address, and
   219                           ;	W with the last address+1
   220                           
   221  061F  0064               	clrwdt	;clear the watchdog before getting into this loop
   222  0620                     clrloop0:	
   223  0620  0180               	clrf	0	;clear RAM location pointed to by FSR
   224  0621  0A84               	incf	4,f	;increment pointer
   225  0622  0604               	xorwf	4,w	;XOR with final address
   226  0623  1903               	btfsc	3,2	;have we reached the end yet?
   227  0624  3400               	retlw	0	;all done for this memory range, return
   228  0625  0604               	xorwf	4,w	;XOR again to restore value
   229  0626  2E20               	goto	clrloop0	;do the next byte
   230                           
   231                           	psect	cstackBANK1
   232  00D0                     __pcstackBANK1:	
   233  00D0                     ??_convertMessageStringToSegments:	
   234  00D0                     ?_delay:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  00D0                     delay@delayTime:	
   238                           ; 1 bytes @ 0x0
   239                           
   240                           
   241                           ; 2 bytes @ 0x0
   242  00D0                     	ds	1
   243  00D1                     convertMessageStringToSegments@i:	
   244                           
   245                           ; 2 bytes @ 0x1
   246  00D1                     	ds	1
   247  00D2                     ??_runLEDSequence:	
   248  00D2                     ??_delay:	
   249                           ; 1 bytes @ 0x2
   250                           
   251  00D2                     runLEDSequence@i:	
   252                           ; 1 bytes @ 0x2
   253                           
   254                           
   255                           ; 2 bytes @ 0x2
   256  00D2                     	ds	1
   257  00D3                     convertMessageStringToSegments@indexOfLetterSegments:	
   258                           
   259                           ; 2 bytes @ 0x3
   260  00D3                     	ds	2
   261  00D5                     ??_main:	
   262                           
   263                           ; 1 bytes @ 0x5
   264  00D5                     	ds	3
   265                           
   266                           	psect	cstackCOMMON
   267  0070                     __pcstackCOMMON:	
   268  0070                     ?_convertMessageStringToSegments:	
   269  0070                     ?_runLEDSequence:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_ISR:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?___ftpack:	
   279                           ; 2 bytes @ 0x0
   280                           
   281  0070                     ___ftpack@arg:	
   282                           ; 3 bytes @ 0x0
   283                           
   284                           
   285                           ; 3 bytes @ 0x0
   286  0070                     	ds	3
   287  0073                     ___ftpack@exp:	
   288                           
   289                           ; 1 bytes @ 0x3
   290  0073                     	ds	1
   291  0074                     ___ftpack@sign:	
   292                           
   293                           ; 1 bytes @ 0x4
   294  0074                     	ds	1
   295  0075                     ??___ftpack:	
   296                           
   297                           ; 1 bytes @ 0x5
   298  0075                     	ds	3
   299  0078                     ?___awtoft:	
   300  0078                     ___awtoft@c:	
   301                           ; 3 bytes @ 0x8
   302                           
   303                           
   304                           ; 2 bytes @ 0x8
   305  0078                     	ds	3
   306  007B                     ??___awtoft:	
   307                           
   308                           ; 1 bytes @ 0xB
   309  007B                     	ds	2
   310  007D                     ___awtoft@sign:	
   311                           
   312                           ; 1 bytes @ 0xD
   313  007D                     	ds	1
   314                           
   315                           	psect	cstackBANK0
   316  0020                     __pcstackBANK0:	
   317  0020                     ?___ftmul:	
   318  0020                     ___ftmul@f1:	
   319                           ; 3 bytes @ 0x0
   320                           
   321                           
   322                           ; 3 bytes @ 0x0
   323  0020                     	ds	3
   324  0023                     ___ftmul@f2:	
   325                           
   326                           ; 3 bytes @ 0x3
   327  0023                     	ds	3
   328  0026                     ??___ftmul:	
   329                           
   330                           ; 1 bytes @ 0x6
   331  0026                     	ds	4
   332  002A                     ___ftmul@exp:	
   333                           
   334                           ; 1 bytes @ 0xA
   335  002A                     	ds	1
   336  002B                     ___ftmul@f3_as_product:	
   337                           
   338                           ; 3 bytes @ 0xB
   339  002B                     	ds	3
   340  002E                     ___ftmul@cntr:	
   341                           
   342                           ; 1 bytes @ 0xE
   343  002E                     	ds	1
   344  002F                     ___ftmul@sign:	
   345                           
   346                           ; 1 bytes @ 0xF
   347  002F                     	ds	1
   348  0030                     ?___ftdiv:	
   349  0030                     ___ftdiv@f2:	
   350                           ; 3 bytes @ 0x10
   351                           
   352                           
   353                           ; 3 bytes @ 0x10
   354  0030                     	ds	3
   355  0033                     ___ftdiv@f1:	
   356                           
   357                           ; 3 bytes @ 0x13
   358  0033                     	ds	3
   359  0036                     ??___ftdiv:	
   360                           
   361                           ; 1 bytes @ 0x16
   362  0036                     	ds	4
   363  003A                     ___ftdiv@cntr:	
   364                           
   365                           ; 1 bytes @ 0x1A
   366  003A                     	ds	1
   367  003B                     ___ftdiv@f3:	
   368                           
   369                           ; 3 bytes @ 0x1B
   370  003B                     	ds	3
   371  003E                     ___ftdiv@exp:	
   372                           
   373                           ; 1 bytes @ 0x1E
   374  003E                     	ds	1
   375  003F                     ___ftdiv@sign:	
   376                           
   377                           ; 1 bytes @ 0x1F
   378  003F                     	ds	1
   379  0040                     ?___fttol:	
   380  0040                     ___fttol@f1:	
   381                           ; 4 bytes @ 0x20
   382                           
   383                           
   384                           ; 3 bytes @ 0x20
   385  0040                     	ds	4
   386  0044                     ??___fttol:	
   387                           
   388                           ; 1 bytes @ 0x24
   389  0044                     	ds	4
   390  0048                     ___fttol@sign1:	
   391                           
   392                           ; 1 bytes @ 0x28
   393  0048                     	ds	1
   394  0049                     ___fttol@lval:	
   395                           
   396                           ; 4 bytes @ 0x29
   397  0049                     	ds	4
   398  004D                     ___fttol@exp1:	
   399                           
   400                           ; 1 bytes @ 0x2D
   401  004D                     	ds	1
   402  004E                     ??_ISR:	
   403                           
   404                           ; 1 bytes @ 0x2E
   405  004E                     	ds	4
   406  0052                     ISR@duration:	
   407                           
   408                           ; 2 bytes @ 0x32
   409  0052                     	ds	2
   410                           
   411                           	psect	maintext
   412  0556                     __pmaintext:	
   413 ;;
   414 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   415 ;;
   416 ;; *************** function _main *****************
   417 ;; Defined at:
   418 ;;		line 40 in file "interrupt_wand.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;		None
   421 ;; Auto vars:     Size  Location     Type
   422 ;;		None
   423 ;; Return value:  Size  Location     Type
   424 ;;                  2   56[None  ] int 
   425 ;; Registers used:
   426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   427 ;; Tracked objects:
   428 ;;		On entry : B00/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   432 ;;      Params:         0       0       0       0
   433 ;;      Locals:         0       0       0       0
   434 ;;      Temps:          0       0       3       0
   435 ;;      Totals:         0       0       3       0
   436 ;;Total ram usage:        3 bytes
   437 ;; Hardware stack levels required when called:    5
   438 ;; This function calls:
   439 ;;		_convertMessageStringToSegments
   440 ;;		_runLEDSequence
   441 ;; This function is called by:
   442 ;;		Startup code after reset
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           
   447                           ;psect for function _main
   448  0556                     _main:	
   449                           
   450                           ;interrupt_wand.c: 42: ANSEL = 0b00000010;
   451                           
   452                           ;incstack = 0
   453                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   454  0556  3002               	movlw	2
   455  0557  1283               	bcf	3,5	;RP0=0, select bank2
   456  0558  1703               	bsf	3,6	;RP1=1, select bank2
   457  0559  009E               	movwf	30	;volatile
   458                           
   459                           ;interrupt_wand.c: 43: ANSELH = 0;
   460  055A  019F               	clrf	31	;volatile
   461                           
   462                           ;interrupt_wand.c: 44: TRISAbits.TRISA1 = 1;
   463  055B  1683               	bsf	3,5	;RP0=1, select bank1
   464  055C  1303               	bcf	3,6	;RP1=0, select bank1
   465  055D  1485               	bsf	5,1	;volatile
   466                           
   467                           ;interrupt_wand.c: 45: TRISC = 0;
   468  055E  0187               	clrf	7	;volatile
   469                           
   470                           ;interrupt_wand.c: 46: PORTC = 0;
   471  055F  1283               	bcf	3,5	;RP0=0, select bank0
   472  0560  1303               	bcf	3,6	;RP1=0, select bank0
   473  0561  0187               	clrf	7	;volatile
   474                           
   475                           ;interrupt_wand.c: 51: CM1CON0 = 0b10000100;
   476  0562  3084               	movlw	132
   477  0563  1283               	bcf	3,5	;RP0=0, select bank2
   478  0564  1703               	bsf	3,6	;RP1=1, select bank2
   479  0565  0099               	movwf	25	;volatile
   480                           
   481                           ;interrupt_wand.c: 52: VRCON = 0b10101011;
   482  0566  30AB               	movlw	171
   483  0567  0098               	movwf	24	;volatile
   484                           
   485                           ;interrupt_wand.c: 53: PIE2bits.C1IE = 1;
   486  0568  1683               	bsf	3,5	;RP0=1, select bank1
   487  0569  1303               	bcf	3,6	;RP1=0, select bank1
   488  056A  168D               	bsf	13,5	;volatile
   489                           
   490                           ;interrupt_wand.c: 54: PIR2bits.C1IF = 0;
   491  056B  1283               	bcf	3,5	;RP0=0, select bank0
   492  056C  1303               	bcf	3,6	;RP1=0, select bank0
   493  056D  128D               	bcf	13,5	;volatile
   494                           
   495                           ;interrupt_wand.c: 55: INTCONbits.PEIE = 1;
   496  056E  170B               	bsf	11,6	;volatile
   497                           
   498                           ;interrupt_wand.c: 57: messageString[0] = 'S';
   499  056F  3053               	movlw	83
   500  0570  1683               	bsf	3,5	;RP0=1, select bank1
   501  0571  1303               	bcf	3,6	;RP1=0, select bank1
   502  0572  00D5               	movwf	??_main^(0+128)
   503  0573  0855               	movf	??_main^(0+128),w
   504  0574  00C3               	movwf	_messageString^(0+128)
   505                           
   506                           ;interrupt_wand.c: 58: messageString[1] = 'A';
   507  0575  3041               	movlw	65
   508  0576  00D5               	movwf	??_main^(0+128)
   509  0577  0855               	movf	??_main^(0+128),w
   510  0578  00C4               	movwf	(_messageString^(0+128)+1)
   511                           
   512                           ;interrupt_wand.c: 59: messageString[2] = 'H';
   513  0579  3048               	movlw	72
   514  057A  00D5               	movwf	??_main^(0+128)
   515  057B  0855               	movf	??_main^(0+128),w
   516  057C  00C5               	movwf	(_messageString^(0+128)+2)
   517                           
   518                           ;interrupt_wand.c: 60: messageString[3] = 'O';
   519  057D  304F               	movlw	79
   520  057E  00D5               	movwf	??_main^(0+128)
   521  057F  0855               	movf	??_main^(0+128),w
   522  0580  00C6               	movwf	(_messageString^(0+128)+3)
   523                           
   524                           ;interrupt_wand.c: 61: messageString[4] = 'T';
   525  0581  3054               	movlw	84
   526  0582  00D5               	movwf	??_main^(0+128)
   527  0583  0855               	movf	??_main^(0+128),w
   528  0584  00C7               	movwf	(_messageString^(0+128)+4)
   529                           
   530                           ;interrupt_wand.c: 62: messageString[5] = 'A';
   531  0585  3041               	movlw	65
   532  0586  00D5               	movwf	??_main^(0+128)
   533  0587  0855               	movf	??_main^(0+128),w
   534  0588  00C8               	movwf	(_messageString^(0+128)+5)
   535                           
   536                           ;interrupt_wand.c: 63: lengthOfMessageString = 6;
   537  0589  3006               	movlw	6
   538  058A  00D8               	movwf	_lengthOfMessageString^(0+128)
   539  058B  3000               	movlw	0
   540  058C  00D9               	movwf	(_lengthOfMessageString^(0+128)+1)
   541                           
   542                           ;interrupt_wand.c: 65: convertMessageStringToSegments();
   543  058D  118A  202A  118A   	fcall	_convertMessageStringToSegments
   544                           
   545                           ;interrupt_wand.c: 67: _delay((unsigned long)((1000)*(1000000/4000.0)));
   546  0590  3002               	movlw	2
   547  0591  1683               	bsf	3,5	;RP0=1, select bank1
   548  0592  1303               	bcf	3,6	;RP1=0, select bank1
   549  0593  00D7               	movwf	(??_main^(0+128)+2)
   550  0594  3045               	movlw	69
   551  0595  00D6               	movwf	(??_main^(0+128)+1)
   552  0596  30A9               	movlw	169
   553  0597  00D5               	movwf	??_main^(0+128)
   554  0598                     u1097:	
   555  0598  0BD5               	decfsz	??_main^(0+128),f
   556  0599  2D98               	goto	u1097
   557  059A  0BD6               	decfsz	(??_main^(0+128)+1),f
   558  059B  2D98               	goto	u1097
   559  059C  0BD7               	decfsz	(??_main^(0+128)+2),f
   560  059D  2D98               	goto	u1097
   561  059E  0000               	nop
   562                           
   563                           ;interrupt_wand.c: 69: INTCONbits.GIE = 1;
   564  059F  178B               	bsf	11,7	;volatile
   565                           
   566                           ;interrupt_wand.c: 71: TMR1H = 0;
   567  05A0  1283               	bcf	3,5	;RP0=0, select bank0
   568  05A1  1303               	bcf	3,6	;RP1=0, select bank0
   569  05A2  018F               	clrf	15	;volatile
   570                           
   571                           ;interrupt_wand.c: 72: TMR1L = 0;
   572  05A3  018E               	clrf	14	;volatile
   573                           
   574                           ;interrupt_wand.c: 73: T1CON = 0b10110001;
   575  05A4  30B1               	movlw	177
   576  05A5  0090               	movwf	16	;volatile
   577  05A6                     l1361:	
   578                           ;interrupt_wand.c: 75: while (1) {
   579                           
   580                           
   581                           ;interrupt_wand.c: 76: if (isSequenceRunning) {
   582  05A6  1683               	bsf	3,5	;RP0=1, select bank1
   583  05A7  1303               	bcf	3,6	;RP1=0, select bank1
   584  05A8  084C               	movf	_isSequenceRunning^(0+128),w
   585  05A9  044D               	iorwf	(_isSequenceRunning+1)^(0+128),w
   586  05AA  1903               	btfsc	3,2
   587  05AB  2DA6               	goto	l1361
   588                           
   589                           ;interrupt_wand.c: 77: runLEDSequence();
   590  05AC  118A  25B4  118A   	fcall	_runLEDSequence
   591                           
   592                           ;interrupt_wand.c: 78: isSequenceRunning = 0;
   593  05AF  1683               	bsf	3,5	;RP0=1, select bank1
   594  05B0  1303               	bcf	3,6	;RP1=0, select bank1
   595  05B1  01CC               	clrf	_isSequenceRunning^(0+128)
   596  05B2  01CD               	clrf	(_isSequenceRunning+1)^(0+128)
   597  05B3  2DA6               	goto	l1361
   598  05B4                     __end_of_main:	
   599                           ;interrupt_wand.c: 79: }
   600                           ;interrupt_wand.c: 80: }
   601                           ;interrupt_wand.c: 82: return 0;
   602                           ;	Return value of _main is never used
   603                           
   604                           
   605                           	psect	text1
   606  05B4                     __ptext1:	
   607 ;; *************** function _runLEDSequence *****************
   608 ;; Defined at:
   609 ;;		line 124 in file "interrupt_wand.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;		None
   612 ;; Auto vars:     Size  Location     Type
   613 ;;  i               2    2[BANK1 ] int 
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   623 ;;      Params:         0       0       0       0
   624 ;;      Locals:         0       0       2       0
   625 ;;      Temps:          0       0       0       0
   626 ;;      Totals:         0       0       2       0
   627 ;;Total ram usage:        2 bytes
   628 ;; Hardware stack levels used:    1
   629 ;; Hardware stack levels required when called:    4
   630 ;; This function calls:
   631 ;;		_delay
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           
   638                           ;psect for function _runLEDSequence
   639  05B4                     _runLEDSequence:	
   640                           
   641                           ;interrupt_wand.c: 126: for (int i = lengthOfMessage - 1; i >= 0; i--) {
   642                           
   643                           ;incstack = 0
   644                           ; Regs used in _runLEDSequence: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   645  05B4  1283               	bcf	3,5	;RP0=0, select bank0
   646  05B5  1303               	bcf	3,6	;RP1=0, select bank0
   647  05B6  0854               	movf	_lengthOfMessage,w
   648  05B7  3EFF               	addlw	255
   649  05B8  1683               	bsf	3,5	;RP0=1, select bank1
   650  05B9  1303               	bcf	3,6	;RP1=0, select bank1
   651  05BA  00D2               	movwf	runLEDSequence@i^(0+128)
   652  05BB  1283               	bcf	3,5	;RP0=0, select bank0
   653  05BC  1303               	bcf	3,6	;RP1=0, select bank0
   654  05BD  0855               	movf	_lengthOfMessage+1,w
   655  05BE  1803               	skipnc
   656  05BF  3E01               	addlw	1
   657  05C0  3EFF               	addlw	255
   658  05C1  1683               	bsf	3,5	;RP0=1, select bank1
   659  05C2  1303               	bcf	3,6	;RP1=0, select bank1
   660  05C3  00D3               	movwf	(runLEDSequence@i+1)^(0+128)
   661  05C4  1BD3               	btfsc	(runLEDSequence@i+1)^(0+128),7
   662  05C5  2DE1               	goto	l1167
   663  05C6                     l1159:	
   664                           
   665                           ;interrupt_wand.c: 127: PORTC = letterSegments[i];
   666  05C6  0852               	movf	runLEDSequence@i^(0+128),w
   667  05C7  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   668  05C8  0084               	movwf	4
   669  05C9  1383               	bcf	3,7	;select IRP bank1
   670  05CA  0800               	movf	0,w
   671  05CB  1283               	bcf	3,5	;RP0=0, select bank0
   672  05CC  1303               	bcf	3,6	;RP1=0, select bank0
   673  05CD  0087               	movwf	7	;volatile
   674                           
   675                           ;interrupt_wand.c: 128: delay(timePerSegment);
   676  05CE  1683               	bsf	3,5	;RP0=1, select bank1
   677  05CF  1303               	bcf	3,6	;RP1=0, select bank1
   678  05D0  085B               	movf	(_timePerSegment+1)^(0+128),w
   679  05D1  00D1               	movwf	(delay@delayTime+1)^(0+128)
   680  05D2  085A               	movf	_timePerSegment^(0+128),w
   681  05D3  00D0               	movwf	delay@delayTime^(0+128)
   682  05D4  118A  2605  118A   	fcall	_delay
   683  05D7  30FF               	movlw	255
   684  05D8  1683               	bsf	3,5	;RP0=1, select bank1
   685  05D9  1303               	bcf	3,6	;RP1=0, select bank1
   686  05DA  07D2               	addwf	runLEDSequence@i^(0+128),f
   687  05DB  1803               	skipnc
   688  05DC  0AD3               	incf	(runLEDSequence@i+1)^(0+128),f
   689  05DD  30FF               	movlw	255
   690  05DE  07D3               	addwf	(runLEDSequence@i+1)^(0+128),f
   691  05DF  1FD3               	btfss	(runLEDSequence@i+1)^(0+128),7
   692  05E0  2DC6               	goto	l1159
   693  05E1                     l1167:	
   694                           
   695                           ;interrupt_wand.c: 129: }
   696                           ;interrupt_wand.c: 131: PORTC = 0;
   697  05E1  1283               	bcf	3,5	;RP0=0, select bank0
   698  05E2  1303               	bcf	3,6	;RP1=0, select bank0
   699  05E3  0187               	clrf	7	;volatile
   700  05E4  0008               	return
   701  05E5                     __end_of_runLEDSequence:	
   702                           
   703                           	psect	text2
   704  0605                     __ptext2:	
   705 ;; *************** function _delay *****************
   706 ;; Defined at:
   707 ;;		line 134 in file "interrupt_wand.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  delayTime       2    0[BANK1 ] int 
   710 ;; Auto vars:     Size  Location     Type
   711 ;;		None
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg, btemp+1
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   721 ;;      Params:         0       0       2       0
   722 ;;      Locals:         0       0       0       0
   723 ;;      Temps:          0       0       0       0
   724 ;;      Totals:         0       0       2       0
   725 ;;Total ram usage:        2 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    3
   728 ;; This function calls:
   729 ;;		Nothing
   730 ;; This function is called by:
   731 ;;		_runLEDSequence
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           
   736                           ;psect for function _delay
   737  0605                     _delay:	
   738                           
   739                           ;interrupt_wand.c: 135: for (delayingVariable = delayTime; delayingVariable > 0; delayin
      +                          gVariable--) {}
   740                           
   741                           ;incstack = 0
   742                           ; Regs used in _delay: [wreg+btemp+1]
   743  0605  1683               	bsf	3,5	;RP0=1, select bank1
   744  0606  1303               	bcf	3,6	;RP1=0, select bank1
   745  0607  0851               	movf	(delay@delayTime+1)^(0+128),w
   746  0608  00CF               	movwf	(_delayingVariable+1)^(0+128)
   747  0609  0850               	movf	delay@delayTime^(0+128),w
   748  060A  00CE               	movwf	_delayingVariable^(0+128)
   749  060B                     l995:	
   750  060B  084F               	movf	(_delayingVariable+1)^(0+128),w
   751  060C  3A80               	xorlw	128
   752  060D  00FF               	movwf	127
   753  060E  3080               	movlw	128
   754  060F  027F               	subwf	127,w
   755  0610  1D03               	skipz
   756  0611  2E14               	goto	u555
   757  0612  3001               	movlw	1
   758  0613  024E               	subwf	_delayingVariable^(0+128),w
   759  0614                     u555:	
   760  0614  1C03               	btfss	3,0
   761  0615  0008               	return
   762  0616  30FF               	movlw	255
   763  0617  1683               	bsf	3,5	;RP0=1, select bank1
   764  0618  1303               	bcf	3,6	;RP1=0, select bank1
   765  0619  07CE               	addwf	_delayingVariable^(0+128),f
   766  061A  1803               	skipnc
   767  061B  0ACF               	incf	(_delayingVariable+1)^(0+128),f
   768  061C  30FF               	movlw	255
   769  061D  07CF               	addwf	(_delayingVariable+1)^(0+128),f
   770  061E  2E0B               	goto	l995
   771  061F                     __end_of_delay:	
   772                           
   773                           	psect	text3
   774  002A                     __ptext3:	
   775 ;; *************** function _convertMessageStringToSegments *****************
   776 ;; Defined at:
   777 ;;		line 138 in file "interrupt_wand.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;  i               2    1[BANK1 ] int 
   782 ;;  indexOfLette    2    3[BANK1 ] int 
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   792 ;;      Params:         0       0       0       0
   793 ;;      Locals:         0       0       4       0
   794 ;;      Temps:          0       0       1       0
   795 ;;      Totals:         0       0       5       0
   796 ;;Total ram usage:        5 bytes
   797 ;; Hardware stack levels used:    1
   798 ;; Hardware stack levels required when called:    3
   799 ;; This function calls:
   800 ;;		Nothing
   801 ;; This function is called by:
   802 ;;		_main
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           
   807                           ;psect for function _convertMessageStringToSegments
   808  002A                     _convertMessageStringToSegments:	
   809                           
   810                           ;interrupt_wand.c: 139: int indexOfLetterSegments = 0;
   811                           
   812                           ;incstack = 0
   813                           ; Regs used in _convertMessageStringToSegments: [wreg-fsr0h+status,2+status,0]
   814  002A  1683               	bsf	3,5	;RP0=1, select bank1
   815  002B  1303               	bcf	3,6	;RP1=0, select bank1
   816  002C  01D3               	clrf	convertMessageStringToSegments@indexOfLetterSegments^(0+128)
   817  002D  01D4               	clrf	(convertMessageStringToSegments@indexOfLetterSegments+1)^(0+128)
   818                           
   819                           ;interrupt_wand.c: 140: for (int i = 0; i < lengthOfMessageString; i++) {
   820  002E  01D1               	clrf	convertMessageStringToSegments@i^(0+128)
   821  002F  01D2               	clrf	(convertMessageStringToSegments@i+1)^(0+128)
   822  0030  29CE               	goto	l1149
   823  0031                     l1031:	
   824                           ;interrupt_wand.c: 142: case ' ':
   825                           
   826                           ;interrupt_wand.c: 141: switch (messageString[i]) {
   827                           
   828                           
   829                           ;interrupt_wand.c: 143: letterSegments[indexOfLetterSegments] = 0b00000000;
   830  0031  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   831  0032  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   832  0033  0084               	movwf	4
   833  0034  1383               	bcf	3,7	;select IRP bank1
   834  0035  0180               	clrf	0
   835                           
   836                           ;interrupt_wand.c: 144: letterSegments[indexOfLetterSegments] = 0b00000000;
   837  0036  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   838  0037  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   839  0038  0084               	movwf	4
   840  0039  0180               	clrf	0
   841                           
   842                           ;interrupt_wand.c: 145: indexOfLetterSegments = indexOfLetterSegments + 2;
   843  003A  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   844  003B  3E02               	addlw	2
   845  003C  29B2               	goto	L26
   846  003D                     l1035:	
   847                           ;interrupt_wand.c: 147: case 'A':
   848                           
   849                           ;interrupt_wand.c: 146: break;
   850                           
   851                           
   852                           ;interrupt_wand.c: 148: letterSegments[indexOfLetterSegments] = 0b11111111;
   853  003D  30FF               	movlw	255
   854  003E  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   855  003F  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   856  0040  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   857  0041  0084               	movwf	4
   858  0042  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   859  0043  0080               	movwf	0
   860                           
   861                           ;interrupt_wand.c: 149: letterSegments[indexOfLetterSegments + 1] = 0b00001001;
   862  0044  3009               	movlw	9
   863  0045  296E               	goto	L38
   864  0046                     l1039:	
   865                           ;interrupt_wand.c: 153: case 'B':
   866                           
   867                           ;interrupt_wand.c: 152: break;
   868                           
   869                           ;interrupt_wand.c: 151: indexOfLetterSegments = indexOfLetterSegments + 3;
   870                           
   871                           ;interrupt_wand.c: 150: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
   872                           
   873                           
   874                           ;interrupt_wand.c: 154: letterSegments[indexOfLetterSegments] = 0b11111111;
   875  0046  30FF               	movlw	255
   876  0047  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   877  0048  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   878  0049  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   879  004A  0084               	movwf	4
   880  004B  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   881  004C  0080               	movwf	0
   882                           
   883                           ;interrupt_wand.c: 155: letterSegments[indexOfLetterSegments + 1] = 0b10010000;
   884  004D  3090               	movlw	144
   885  004E  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   886  004F  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   887  0050  3E01               	addlw	1
   888  0051  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   889  0052  0084               	movwf	4
   890  0053  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   891  0054  0080               	movwf	0
   892                           
   893                           ;interrupt_wand.c: 156: letterSegments[indexOfLetterSegments + 2] = 0b11110000;
   894  0055  30F0               	movlw	240
   895  0056  29A9               	goto	L28
   896  0057                     l1043:	
   897                           ;interrupt_wand.c: 159: case 'C':
   898                           
   899                           ;interrupt_wand.c: 158: break;
   900                           
   901                           ;interrupt_wand.c: 157: indexOfLetterSegments = indexOfLetterSegments + 3;
   902                           
   903                           
   904                           ;interrupt_wand.c: 160: letterSegments[indexOfLetterSegments] = 0b11111111;
   905  0057  30FF               	movlw	255
   906  0058  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   907  0059  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   908  005A  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   909  005B  0084               	movwf	4
   910  005C  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   911  005D  0080               	movwf	0
   912                           
   913                           ;interrupt_wand.c: 161: letterSegments[indexOfLetterSegments + 1] = 0b10000001;
   914  005E  3081               	movlw	129
   915  005F  289E               	goto	L35
   916  0060                     l1047:	
   917                           ;interrupt_wand.c: 165: case 'D':
   918                           
   919                           ;interrupt_wand.c: 164: break;
   920                           
   921                           ;interrupt_wand.c: 163: indexOfLetterSegments = indexOfLetterSegments + 3;
   922                           
   923                           ;interrupt_wand.c: 162: letterSegments[indexOfLetterSegments + 2] = 0b10000001;
   924                           
   925                           
   926                           ;interrupt_wand.c: 166: letterSegments[indexOfLetterSegments] = 0b11110000;
   927  0060  30F0               	movlw	240
   928  0061  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   929  0062  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   930  0063  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   931  0064  0084               	movwf	4
   932  0065  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   933  0066  0080               	movwf	0
   934                           
   935                           ;interrupt_wand.c: 167: letterSegments[indexOfLetterSegments + 1] = 0b10010000;
   936  0067  3090               	movlw	144
   937  0068  296E               	goto	L38
   938  0069                     l1051:	
   939                           ;interrupt_wand.c: 171: case 'E':
   940                           
   941                           ;interrupt_wand.c: 170: break;
   942                           
   943                           ;interrupt_wand.c: 169: indexOfLetterSegments = indexOfLetterSegments + 3;
   944                           
   945                           ;interrupt_wand.c: 168: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
   946                           
   947                           
   948                           ;interrupt_wand.c: 172: letterSegments[indexOfLetterSegments] = 0b11111111;
   949  0069  30FF               	movlw	255
   950  006A  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   951  006B  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   952  006C  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   953  006D  0084               	movwf	4
   954  006E  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   955  006F  0080               	movwf	0
   956                           
   957                           ;interrupt_wand.c: 173: letterSegments[indexOfLetterSegments + 1] = 0b10010001;
   958  0070  3091               	movlw	145
   959  0071  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   960  0072  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   961  0073  3E01               	addlw	1
   962  0074  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   963  0075  0084               	movwf	4
   964  0076  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   965  0077  0080               	movwf	0
   966                           
   967                           ;interrupt_wand.c: 174: letterSegments[indexOfLetterSegments + 2] = 0b10010001;
   968  0078  3091               	movlw	145
   969  0079  29A9               	goto	L28
   970  007A                     l1055:	
   971                           ;interrupt_wand.c: 177: case 'F':
   972                           
   973                           ;interrupt_wand.c: 176: break;
   974                           
   975                           ;interrupt_wand.c: 175: indexOfLetterSegments = indexOfLetterSegments + 3;
   976                           
   977                           
   978                           ;interrupt_wand.c: 178: letterSegments[indexOfLetterSegments] = 0b11111111;
   979  007A  30FF               	movlw	255
   980  007B  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   981  007C  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   982  007D  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   983  007E  0084               	movwf	4
   984  007F  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   985  0080  0080               	movwf	0
   986                           
   987                           ;interrupt_wand.c: 179: letterSegments[indexOfLetterSegments + 1] = 0b00001001;
   988  0081  3009               	movlw	9
   989  0082  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
   990  0083  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
   991  0084  3E01               	addlw	1
   992  0085  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
   993  0086  0084               	movwf	4
   994  0087  0850               	movf	??_convertMessageStringToSegments^(0+128),w
   995  0088  0080               	movwf	0
   996                           
   997                           ;interrupt_wand.c: 180: letterSegments[indexOfLetterSegments + 2] = 0b00001001;
   998  0089  3009               	movlw	9
   999  008A  29A9               	goto	L28
  1000  008B                     l1059:	
  1001                           ;interrupt_wand.c: 183: case 'G':
  1002                           
  1003                           ;interrupt_wand.c: 182: break;
  1004                           
  1005                           ;interrupt_wand.c: 181: indexOfLetterSegments = indexOfLetterSegments + 3;
  1006                           
  1007                           
  1008                           ;interrupt_wand.c: 184: letterSegments[indexOfLetterSegments] = 0b11111111;
  1009  008B  30FF               	movlw	255
  1010  008C  292B               	goto	L37
  1011  008D                     l1063:	
  1012                           ;interrupt_wand.c: 189: case 'H':
  1013                           
  1014                           ;interrupt_wand.c: 188: break;
  1015                           
  1016                           ;interrupt_wand.c: 187: indexOfLetterSegments = indexOfLetterSegments + 3;
  1017                           
  1018                           ;interrupt_wand.c: 186: letterSegments[indexOfLetterSegments + 2] = 0b11110001;
  1019                           
  1020                           ;interrupt_wand.c: 185: letterSegments[indexOfLetterSegments + 1] = 0b10010001;
  1021                           
  1022                           
  1023                           ;interrupt_wand.c: 190: letterSegments[indexOfLetterSegments] = 0b11111111;
  1024  008D  30FF               	movlw	255
  1025  008E  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1026  008F  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1027  0090  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1028  0091  0084               	movwf	4
  1029  0092  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1030  0093  0080               	movwf	0
  1031                           
  1032                           ;interrupt_wand.c: 191: letterSegments[indexOfLetterSegments + 1] = 0b00001000;
  1033  0094  3008               	movlw	8
  1034  0095  296E               	goto	L38
  1035  0096                     l1067:	
  1036                           ;interrupt_wand.c: 195: case 'I':
  1037                           
  1038                           ;interrupt_wand.c: 194: break;
  1039                           
  1040                           ;interrupt_wand.c: 193: indexOfLetterSegments = indexOfLetterSegments + 3;
  1041                           
  1042                           ;interrupt_wand.c: 192: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
  1043                           
  1044                           
  1045                           ;interrupt_wand.c: 196: letterSegments[indexOfLetterSegments] = 0b10000001;
  1046  0096  3081               	movlw	129
  1047  0097  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1048  0098  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1049  0099  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1050  009A  0084               	movwf	4
  1051  009B  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1052  009C  0080               	movwf	0
  1053                           
  1054                           ;interrupt_wand.c: 197: letterSegments[indexOfLetterSegments + 1] = 0b11111111;
  1055  009D  30FF               	movlw	255
  1056  009E                     L35:	
  1057  009E  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1058  009F  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1059  00A0  3E01               	addlw	1
  1060  00A1  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1061  00A2  0084               	movwf	4
  1062  00A3  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1063  00A4  0080               	movwf	0
  1064                           
  1065                           ;interrupt_wand.c: 198: letterSegments[indexOfLetterSegments + 2] = 0b10000001;
  1066  00A5  3081               	movlw	129
  1067  00A6  29A9               	goto	L28
  1068  00A7                     l1071:	
  1069                           ;interrupt_wand.c: 201: case 'J':
  1070                           
  1071                           ;interrupt_wand.c: 200: break;
  1072                           
  1073                           ;interrupt_wand.c: 199: indexOfLetterSegments = indexOfLetterSegments + 3;
  1074                           
  1075                           
  1076                           ;interrupt_wand.c: 202: letterSegments[indexOfLetterSegments] = 0b10000001;
  1077  00A7  3081               	movlw	129
  1078  00A8  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1079  00A9  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1080  00AA  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1081  00AB  0084               	movwf	4
  1082  00AC  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1083  00AD  0080               	movwf	0
  1084                           
  1085                           ;interrupt_wand.c: 203: letterSegments[indexOfLetterSegments + 1] = 0b11111111;
  1086  00AE  30FF               	movlw	255
  1087  00AF  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1088  00B0  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1089  00B1  3E01               	addlw	1
  1090  00B2  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1091  00B3  0084               	movwf	4
  1092  00B4  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1093  00B5  0080               	movwf	0
  1094                           
  1095                           ;interrupt_wand.c: 204: letterSegments[indexOfLetterSegments + 2] = 0b00000001;
  1096  00B6  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1097  00B7  3E02               	addlw	2
  1098  00B8  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1099  00B9  0084               	movwf	4
  1100  00BA  0180               	clrf	0
  1101  00BB  0A80               	incf	0,f
  1102  00BC  29B0               	goto	L27
  1103  00BD                     l1075:	
  1104                           ;interrupt_wand.c: 207: case 'K':
  1105                           
  1106                           ;interrupt_wand.c: 206: break;
  1107                           
  1108                           ;interrupt_wand.c: 205: indexOfLetterSegments = indexOfLetterSegments + 3;
  1109                           
  1110                           
  1111                           ;interrupt_wand.c: 208: letterSegments[indexOfLetterSegments] = 0b11111111;
  1112  00BD  30FF               	movlw	255
  1113  00BE  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1114  00BF  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1115  00C0  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1116  00C1  0084               	movwf	4
  1117  00C2  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1118  00C3  0080               	movwf	0
  1119                           
  1120                           ;interrupt_wand.c: 209: letterSegments[indexOfLetterSegments + 1] = 0b00100100;
  1121  00C4  3024               	movlw	36
  1122  00C5  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1123  00C6  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1124  00C7  3E01               	addlw	1
  1125  00C8  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1126  00C9  0084               	movwf	4
  1127  00CA  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1128  00CB  0080               	movwf	0
  1129                           
  1130                           ;interrupt_wand.c: 210: letterSegments[indexOfLetterSegments + 2] = 0b01000010;
  1131  00CC  3042               	movlw	66
  1132  00CD  29A9               	goto	L28
  1133  00CE                     l1079:	
  1134                           ;interrupt_wand.c: 213: case 'L':
  1135                           
  1136                           ;interrupt_wand.c: 212: break;
  1137                           
  1138                           ;interrupt_wand.c: 211: indexOfLetterSegments = indexOfLetterSegments + 3;
  1139                           
  1140                           
  1141                           ;interrupt_wand.c: 214: letterSegments[indexOfLetterSegments] = 0b11111111;
  1142  00CE  30FF               	movlw	255
  1143  00CF  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1144  00D0  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1145  00D1  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1146  00D2  0084               	movwf	4
  1147  00D3  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1148  00D4  0080               	movwf	0
  1149                           
  1150                           ;interrupt_wand.c: 215: letterSegments[indexOfLetterSegments + 1] = 0b10000000;
  1151  00D5  3080               	movlw	128
  1152  00D6  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1153  00D7  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1154  00D8  3E01               	addlw	1
  1155  00D9  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1156  00DA  0084               	movwf	4
  1157  00DB  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1158  00DC  0080               	movwf	0
  1159                           
  1160                           ;interrupt_wand.c: 216: letterSegments[indexOfLetterSegments + 2] = 0b10000000;
  1161  00DD  3080               	movlw	128
  1162  00DE  29A9               	goto	L28
  1163  00DF                     l1083:	
  1164                           ;interrupt_wand.c: 219: case 'M':
  1165                           
  1166                           ;interrupt_wand.c: 218: break;
  1167                           
  1168                           ;interrupt_wand.c: 217: indexOfLetterSegments = indexOfLetterSegments + 3;
  1169                           
  1170                           
  1171                           ;interrupt_wand.c: 220: letterSegments[indexOfLetterSegments] = 0b11111111;
  1172  00DF  30FF               	movlw	255
  1173  00E0  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1174  00E1  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1175  00E2  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1176  00E3  0084               	movwf	4
  1177  00E4  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1178  00E5  0080               	movwf	0
  1179                           
  1180                           ;interrupt_wand.c: 221: letterSegments[indexOfLetterSegments + 1] = 0b00001111;
  1181  00E6  300F               	movlw	15
  1182  00E7  296E               	goto	L38
  1183  00E8                     l1087:	
  1184                           ;interrupt_wand.c: 225: case 'N':
  1185                           
  1186                           ;interrupt_wand.c: 224: break;
  1187                           
  1188                           ;interrupt_wand.c: 223: indexOfLetterSegments = indexOfLetterSegments + 3;
  1189                           
  1190                           ;interrupt_wand.c: 222: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
  1191                           
  1192                           
  1193                           ;interrupt_wand.c: 226: letterSegments[indexOfLetterSegments] = 0b11111111;
  1194  00E8  30FF               	movlw	255
  1195  00E9  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1196  00EA  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1197  00EB  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1198  00EC  0084               	movwf	4
  1199  00ED  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1200  00EE  0080               	movwf	0
  1201                           
  1202                           ;interrupt_wand.c: 227: letterSegments[indexOfLetterSegments + 1] = 0b00000001;
  1203  00EF  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1204  00F0  3E01               	addlw	1
  1205  00F1  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1206  00F2  0084               	movwf	4
  1207  00F3  0180               	clrf	0
  1208  00F4  0A80               	incf	0,f
  1209  00F5  2975               	goto	L33
  1210  00F6                     l1091:	
  1211                           ;interrupt_wand.c: 231: case 'O':
  1212                           
  1213                           ;interrupt_wand.c: 230: break;
  1214                           
  1215                           ;interrupt_wand.c: 229: indexOfLetterSegments = indexOfLetterSegments + 3;
  1216                           
  1217                           ;interrupt_wand.c: 228: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
  1218                           
  1219                           
  1220                           ;interrupt_wand.c: 232: letterSegments[indexOfLetterSegments] = 0b11111111;
  1221  00F6  30FF               	movlw	255
  1222  00F7  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1223  00F8  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1224  00F9  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1225  00FA  0084               	movwf	4
  1226  00FB  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1227  00FC  0080               	movwf	0
  1228                           
  1229                           ;interrupt_wand.c: 233: letterSegments[indexOfLetterSegments + 1] = 0b10000001;
  1230  00FD  3081               	movlw	129
  1231  00FE  296E               	goto	L38
  1232  00FF                     l1095:	
  1233                           ;interrupt_wand.c: 237: case 'P':
  1234                           
  1235                           ;interrupt_wand.c: 236: break;
  1236                           
  1237                           ;interrupt_wand.c: 235: indexOfLetterSegments = indexOfLetterSegments + 3;
  1238                           
  1239                           ;interrupt_wand.c: 234: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
  1240                           
  1241                           
  1242                           ;interrupt_wand.c: 238: letterSegments[indexOfLetterSegments] = 0b11111111;
  1243  00FF  30FF               	movlw	255
  1244  0100  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1245  0101  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1246  0102  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1247  0103  0084               	movwf	4
  1248  0104  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1249  0105  0080               	movwf	0
  1250                           
  1251                           ;interrupt_wand.c: 239: letterSegments[indexOfLetterSegments + 1] = 0b00001001;
  1252  0106  3009               	movlw	9
  1253  0107  2990               	goto	L32
  1254  0108                     l1099:	
  1255                           ;interrupt_wand.c: 243: case 'Q':
  1256                           
  1257                           ;interrupt_wand.c: 242: break;
  1258                           
  1259                           ;interrupt_wand.c: 241: indexOfLetterSegments = indexOfLetterSegments + 3;
  1260                           
  1261                           ;interrupt_wand.c: 240: letterSegments[indexOfLetterSegments + 2] = 0b00001111;
  1262                           
  1263                           
  1264                           ;interrupt_wand.c: 244: letterSegments[indexOfLetterSegments] = 0b00111111;
  1265  0108  303F               	movlw	63
  1266  0109  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1267  010A  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1268  010B  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1269  010C  0084               	movwf	4
  1270  010D  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1271  010E  0080               	movwf	0
  1272                           
  1273                           ;interrupt_wand.c: 245: letterSegments[indexOfLetterSegments + 1] = 0b01100001;
  1274  010F  3061               	movlw	97
  1275  0110  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1276  0111  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1277  0112  3E01               	addlw	1
  1278  0113  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1279  0114  0084               	movwf	4
  1280  0115  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1281  0116  0080               	movwf	0
  1282                           
  1283                           ;interrupt_wand.c: 246: letterSegments[indexOfLetterSegments + 2] = 0b10111111;
  1284  0117  30BF               	movlw	191
  1285  0118  29A9               	goto	L28
  1286  0119                     l1103:	
  1287                           ;interrupt_wand.c: 249: case 'R':
  1288                           
  1289                           ;interrupt_wand.c: 248: break;
  1290                           
  1291                           ;interrupt_wand.c: 247: indexOfLetterSegments = indexOfLetterSegments + 3;
  1292                           
  1293                           
  1294                           ;interrupt_wand.c: 250: letterSegments[indexOfLetterSegments] = 0b11110000;
  1295  0119  30F0               	movlw	240
  1296  011A  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1297  011B  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1298  011C  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1299  011D  0084               	movwf	4
  1300  011E  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1301  011F  0080               	movwf	0
  1302                           
  1303                           ;interrupt_wand.c: 251: letterSegments[indexOfLetterSegments + 1] = 0b00010000;
  1304  0120  3010               	movlw	16
  1305  0121  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1306  0122  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1307  0123  3E01               	addlw	1
  1308  0124  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1309  0125  0084               	movwf	4
  1310  0126  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1311  0127  0080               	movwf	0
  1312                           
  1313                           ;interrupt_wand.c: 252: letterSegments[indexOfLetterSegments + 2] = 0b00010000;
  1314  0128  3010               	movlw	16
  1315  0129  29A9               	goto	L28
  1316  012A                     l1107:	
  1317                           ;interrupt_wand.c: 255: case 'S':
  1318                           
  1319                           ;interrupt_wand.c: 254: break;
  1320                           
  1321                           ;interrupt_wand.c: 253: indexOfLetterSegments = indexOfLetterSegments + 3;
  1322                           
  1323                           
  1324                           ;interrupt_wand.c: 256: letterSegments[indexOfLetterSegments] = 0b10011111;
  1325  012A  309F               	movlw	159
  1326  012B                     L37:	
  1327  012B  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1328  012C  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1329  012D  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1330  012E  0084               	movwf	4
  1331  012F  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1332  0130  0080               	movwf	0
  1333                           
  1334                           ;interrupt_wand.c: 257: letterSegments[indexOfLetterSegments + 1] = 0b10010001;
  1335  0131  3091               	movlw	145
  1336  0132  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1337  0133  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1338  0134  3E01               	addlw	1
  1339  0135  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1340  0136  0084               	movwf	4
  1341  0137  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1342  0138  0080               	movwf	0
  1343                           
  1344                           ;interrupt_wand.c: 258: letterSegments[indexOfLetterSegments + 2] = 0b11110001;
  1345  0139  30F1               	movlw	241
  1346  013A  29A9               	goto	L28
  1347  013B                     l1111:	
  1348                           ;interrupt_wand.c: 261: case 'T':
  1349                           
  1350                           ;interrupt_wand.c: 260: break;
  1351                           
  1352                           ;interrupt_wand.c: 259: indexOfLetterSegments = indexOfLetterSegments + 3;
  1353                           
  1354                           
  1355                           ;interrupt_wand.c: 262: letterSegments[indexOfLetterSegments] = 0b00001000;
  1356  013B  3008               	movlw	8
  1357  013C  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1358  013D  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1359  013E  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1360  013F  0084               	movwf	4
  1361  0140  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1362  0141  0080               	movwf	0
  1363                           
  1364                           ;interrupt_wand.c: 263: letterSegments[indexOfLetterSegments + 1] = 0b11111111;
  1365  0142  30FF               	movlw	255
  1366  0143  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1367  0144  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1368  0145  3E01               	addlw	1
  1369  0146  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1370  0147  0084               	movwf	4
  1371  0148  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1372  0149  0080               	movwf	0
  1373                           
  1374                           ;interrupt_wand.c: 264: letterSegments[indexOfLetterSegments + 2] = 0b00001000;
  1375  014A  3008               	movlw	8
  1376  014B  29A9               	goto	L28
  1377  014C                     l1115:	
  1378                           ;interrupt_wand.c: 267: case 'U':
  1379                           
  1380                           ;interrupt_wand.c: 266: break;
  1381                           
  1382                           ;interrupt_wand.c: 265: indexOfLetterSegments = indexOfLetterSegments + 3;
  1383                           
  1384                           
  1385                           ;interrupt_wand.c: 268: letterSegments[indexOfLetterSegments] = 0b11111111;
  1386  014C  30FF               	movlw	255
  1387  014D  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1388  014E  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1389  014F  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1390  0150  0084               	movwf	4
  1391  0151  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1392  0152  0080               	movwf	0
  1393                           
  1394                           ;interrupt_wand.c: 269: letterSegments[indexOfLetterSegments + 1] = 0b10000000;
  1395  0153  3080               	movlw	128
  1396  0154  296E               	goto	L38
  1397  0155                     l1119:	
  1398                           ;interrupt_wand.c: 273: case 'V':
  1399                           
  1400                           ;interrupt_wand.c: 272: break;
  1401                           
  1402                           ;interrupt_wand.c: 271: indexOfLetterSegments = indexOfLetterSegments + 3;
  1403                           
  1404                           ;interrupt_wand.c: 270: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
  1405                           
  1406                           
  1407                           ;interrupt_wand.c: 274: letterSegments[indexOfLetterSegments] = 0b01100000;
  1408  0155  3060               	movlw	96
  1409  0156  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1410  0157  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1411  0158  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1412  0159  0084               	movwf	4
  1413  015A  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1414  015B  0080               	movwf	0
  1415                           
  1416                           ;interrupt_wand.c: 275: letterSegments[indexOfLetterSegments + 1] = 0b10000000;
  1417  015C  3080               	movlw	128
  1418  015D  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1419  015E  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1420  015F  3E01               	addlw	1
  1421  0160  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1422  0161  0084               	movwf	4
  1423  0162  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1424  0163  0080               	movwf	0
  1425                           
  1426                           ;interrupt_wand.c: 276: letterSegments[indexOfLetterSegments + 2] = 0b01100000;
  1427  0164  3060               	movlw	96
  1428  0165  29A9               	goto	L28
  1429  0166                     l1123:	
  1430                           ;interrupt_wand.c: 279: case 'W':
  1431                           
  1432                           ;interrupt_wand.c: 278: break;
  1433                           
  1434                           ;interrupt_wand.c: 277: indexOfLetterSegments = indexOfLetterSegments + 3;
  1435                           
  1436                           
  1437                           ;interrupt_wand.c: 280: letterSegments[indexOfLetterSegments] = 0b11111111;
  1438  0166  30FF               	movlw	255
  1439  0167  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1440  0168  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1441  0169  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1442  016A  0084               	movwf	4
  1443  016B  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1444  016C  0080               	movwf	0
  1445                           
  1446                           ;interrupt_wand.c: 281: letterSegments[indexOfLetterSegments + 1] = 0b11110000 ;
  1447  016D  30F0               	movlw	240
  1448  016E                     L38:	
  1449  016E  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1450  016F  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1451  0170  3E01               	addlw	1
  1452  0171  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1453  0172  0084               	movwf	4
  1454  0173  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1455  0174  0080               	movwf	0
  1456  0175                     L33:	
  1457                           
  1458                           ;interrupt_wand.c: 282: letterSegments[indexOfLetterSegments + 2] = 0b11111111;
  1459  0175  30FF               	movlw	255
  1460  0176  29A9               	goto	L28
  1461  0177                     l1127:	
  1462                           ;interrupt_wand.c: 285: case 'X':
  1463                           
  1464                           ;interrupt_wand.c: 284: break;
  1465                           
  1466                           ;interrupt_wand.c: 283: indexOfLetterSegments = indexOfLetterSegments + 3;
  1467                           
  1468                           
  1469                           ;interrupt_wand.c: 286: letterSegments[indexOfLetterSegments] = 0b11000011;
  1470  0177  30C3               	movlw	195
  1471  0178  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1472  0179  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1473  017A  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1474  017B  0084               	movwf	4
  1475  017C  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1476  017D  0080               	movwf	0
  1477                           
  1478                           ;interrupt_wand.c: 287: letterSegments[indexOfLetterSegments + 1] = 0b00111100;
  1479  017E  303C               	movlw	60
  1480  017F  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1481  0180  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1482  0181  3E01               	addlw	1
  1483  0182  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1484  0183  0084               	movwf	4
  1485  0184  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1486  0185  0080               	movwf	0
  1487                           
  1488                           ;interrupt_wand.c: 288: letterSegments[indexOfLetterSegments + 2] = 0b11000011;
  1489  0186  30C3               	movlw	195
  1490  0187  29A9               	goto	L28
  1491  0188                     l1131:	
  1492                           ;interrupt_wand.c: 291: case 'Y':
  1493                           
  1494                           ;interrupt_wand.c: 290: break;
  1495                           
  1496                           ;interrupt_wand.c: 289: indexOfLetterSegments = indexOfLetterSegments + 3;
  1497                           
  1498                           
  1499                           ;interrupt_wand.c: 292: letterSegments[indexOfLetterSegments] = 0b00001111;
  1500  0188  300F               	movlw	15
  1501  0189  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1502  018A  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1503  018B  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1504  018C  0084               	movwf	4
  1505  018D  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1506  018E  0080               	movwf	0
  1507                           
  1508                           ;interrupt_wand.c: 293: letterSegments[indexOfLetterSegments + 1] = 0b11111000;
  1509  018F  30F8               	movlw	248
  1510  0190                     L32:	
  1511  0190  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1512  0191  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1513  0192  3E01               	addlw	1
  1514  0193  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1515  0194  0084               	movwf	4
  1516  0195  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1517  0196  0080               	movwf	0
  1518                           
  1519                           ;interrupt_wand.c: 294: letterSegments[indexOfLetterSegments + 2] = 0b00001111;
  1520  0197  300F               	movlw	15
  1521  0198  29A9               	goto	L28
  1522  0199                     l1135:	
  1523                           ;interrupt_wand.c: 297: case 'Z':
  1524                           
  1525                           ;interrupt_wand.c: 296: break;
  1526                           
  1527                           ;interrupt_wand.c: 295: indexOfLetterSegments = indexOfLetterSegments + 3;
  1528                           
  1529                           
  1530                           ;interrupt_wand.c: 298: letterSegments[indexOfLetterSegments] = 0b11100001;
  1531  0199  30E1               	movlw	225
  1532  019A  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1533  019B  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1534  019C  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1535  019D  0084               	movwf	4
  1536  019E  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1537  019F  0080               	movwf	0
  1538                           
  1539                           ;interrupt_wand.c: 299: letterSegments[indexOfLetterSegments + 1] = 0b10011001;
  1540  01A0  3099               	movlw	153
  1541  01A1  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1542  01A2  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1543  01A3  3E01               	addlw	1
  1544  01A4  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1545  01A5  0084               	movwf	4
  1546  01A6  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1547  01A7  0080               	movwf	0
  1548                           
  1549                           ;interrupt_wand.c: 300: letterSegments[indexOfLetterSegments + 2] = 0b10000111;
  1550  01A8  3087               	movlw	135
  1551  01A9                     L28:	
  1552  01A9  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1553  01AA  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1554  01AB  3E02               	addlw	2
  1555  01AC  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1556  01AD  0084               	movwf	4
  1557  01AE  0850               	movf	??_convertMessageStringToSegments^(0+128),w
  1558  01AF  0080               	movwf	0
  1559  01B0                     L27:	
  1560                           
  1561                           ;interrupt_wand.c: 301: indexOfLetterSegments = indexOfLetterSegments + 3;
  1562  01B0  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1563  01B1  3E03               	addlw	3
  1564  01B2                     L26:	
  1565  01B2  00D3               	movwf	convertMessageStringToSegments@indexOfLetterSegments^(0+128)
  1566  01B3  0854               	movf	(convertMessageStringToSegments@indexOfLetterSegments+1)^(0+128),w
  1567  01B4  1803               	skipnc
  1568  01B5  3E01               	addlw	1
  1569  01B6  3E00               	addlw	0
  1570  01B7  00D4               	movwf	(convertMessageStringToSegments@indexOfLetterSegments+1)^(0+128)
  1571  01B8                     l1143:	
  1572                           ;interrupt_wand.c: 304: }
  1573                           
  1574                           ;interrupt_wand.c: 302: break;
  1575                           
  1576                           
  1577                           ;interrupt_wand.c: 305: letterSegments[indexOfLetterSegments] = 0b00000000;
  1578  01B8  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1579  01B9  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1580  01BA  0084               	movwf	4
  1581  01BB  0180               	clrf	0
  1582                           
  1583                           ;interrupt_wand.c: 306: letterSegments[indexOfLetterSegments] = 0b00000000;
  1584  01BC  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1585  01BD  3EA0               	addlw	(low (_letterSegments| 0))& (0+255)
  1586  01BE  0084               	movwf	4
  1587  01BF  0180               	clrf	0
  1588                           
  1589                           ;interrupt_wand.c: 307: indexOfLetterSegments = indexOfLetterSegments + 2;
  1590  01C0  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1591  01C1  3E02               	addlw	2
  1592  01C2  00D3               	movwf	convertMessageStringToSegments@indexOfLetterSegments^(0+128)
  1593  01C3  0854               	movf	(convertMessageStringToSegments@indexOfLetterSegments+1)^(0+128),w
  1594  01C4  1803               	skipnc
  1595  01C5  3E01               	addlw	1
  1596  01C6  3E00               	addlw	0
  1597  01C7  00D4               	movwf	(convertMessageStringToSegments@indexOfLetterSegments+1)^(0+128)
  1598  01C8  3001               	movlw	1
  1599  01C9  07D1               	addwf	convertMessageStringToSegments@i^(0+128),f
  1600  01CA  1803               	skipnc
  1601  01CB  0AD2               	incf	(convertMessageStringToSegments@i+1)^(0+128),f
  1602  01CC  3000               	movlw	0
  1603  01CD  07D2               	addwf	(convertMessageStringToSegments@i+1)^(0+128),f
  1604  01CE                     l1149:	
  1605  01CE  0852               	movf	(convertMessageStringToSegments@i+1)^(0+128),w
  1606  01CF  3A80               	xorlw	128
  1607  01D0  00D0               	movwf	??_convertMessageStringToSegments^(0+128)
  1608  01D1  0859               	movf	(_lengthOfMessageString+1)^(0+128),w
  1609  01D2  3A80               	xorlw	128
  1610  01D3  0250               	subwf	??_convertMessageStringToSegments^(0+128),w
  1611  01D4  1D03               	skipz
  1612  01D5  29D8               	goto	u685
  1613  01D6  0858               	movf	_lengthOfMessageString^(0+128),w
  1614  01D7  0251               	subwf	convertMessageStringToSegments@i^(0+128),w
  1615  01D8                     u685:	
  1616  01D8  1803               	btfsc	3,0
  1617  01D9  2A34               	goto	l1151
  1618  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1619  01DB  1303               	bcf	3,6	;RP1=0, select bank1
  1620  01DC  0851               	movf	convertMessageStringToSegments@i^(0+128),w
  1621  01DD  3EC3               	addlw	(low (_messageString| 0))& (0+255)
  1622  01DE  0084               	movwf	4
  1623  01DF  1383               	bcf	3,7	;select IRP bank1
  1624  01E0  0800               	movf	0,w
  1625                           
  1626                           ; Switch size 1, requested type "space"
  1627                           ; Number of cases is 27, Range of values is 32 to 90
  1628                           ; switch strategies available:
  1629                           ; Name         Instructions Cycles
  1630                           ; simple_byte           82    42 (average)
  1631                           ; direct_byte          128    10 (fixed)
  1632                           ; jumptable            263     9 (fixed)
  1633                           ;	Chosen strategy is simple_byte
  1634  01E1  3A20               	xorlw	32	; case 32
  1635  01E2  1903               	skipnz
  1636  01E3  2831               	goto	l1031
  1637  01E4  3A61               	xorlw	97	; case 65
  1638  01E5  1903               	skipnz
  1639  01E6  283D               	goto	l1035
  1640  01E7  3A03               	xorlw	3	; case 66
  1641  01E8  1903               	skipnz
  1642  01E9  2846               	goto	l1039
  1643  01EA  3A01               	xorlw	1	; case 67
  1644  01EB  1903               	skipnz
  1645  01EC  2857               	goto	l1043
  1646  01ED  3A07               	xorlw	7	; case 68
  1647  01EE  1903               	skipnz
  1648  01EF  2860               	goto	l1047
  1649  01F0  3A01               	xorlw	1	; case 69
  1650  01F1  1903               	skipnz
  1651  01F2  2869               	goto	l1051
  1652  01F3  3A03               	xorlw	3	; case 70
  1653  01F4  1903               	skipnz
  1654  01F5  287A               	goto	l1055
  1655  01F6  3A01               	xorlw	1	; case 71
  1656  01F7  1903               	skipnz
  1657  01F8  288B               	goto	l1059
  1658  01F9  3A0F               	xorlw	15	; case 72
  1659  01FA  1903               	skipnz
  1660  01FB  288D               	goto	l1063
  1661  01FC  3A01               	xorlw	1	; case 73
  1662  01FD  1903               	skipnz
  1663  01FE  2896               	goto	l1067
  1664  01FF  3A03               	xorlw	3	; case 74
  1665  0200  1903               	skipnz
  1666  0201  28A7               	goto	l1071
  1667  0202  3A01               	xorlw	1	; case 75
  1668  0203  1903               	skipnz
  1669  0204  28BD               	goto	l1075
  1670  0205  3A07               	xorlw	7	; case 76
  1671  0206  1903               	skipnz
  1672  0207  28CE               	goto	l1079
  1673  0208  3A01               	xorlw	1	; case 77
  1674  0209  1903               	skipnz
  1675  020A  28DF               	goto	l1083
  1676  020B  3A03               	xorlw	3	; case 78
  1677  020C  1903               	skipnz
  1678  020D  28E8               	goto	l1087
  1679  020E  3A01               	xorlw	1	; case 79
  1680  020F  1903               	skipnz
  1681  0210  28F6               	goto	l1091
  1682  0211  3A1F               	xorlw	31	; case 80
  1683  0212  1903               	skipnz
  1684  0213  28FF               	goto	l1095
  1685  0214  3A01               	xorlw	1	; case 81
  1686  0215  1903               	skipnz
  1687  0216  2908               	goto	l1099
  1688  0217  3A03               	xorlw	3	; case 82
  1689  0218  1903               	skipnz
  1690  0219  2919               	goto	l1103
  1691  021A  3A01               	xorlw	1	; case 83
  1692  021B  1903               	skipnz
  1693  021C  292A               	goto	l1107
  1694  021D  3A07               	xorlw	7	; case 84
  1695  021E  1903               	skipnz
  1696  021F  293B               	goto	l1111
  1697  0220  3A01               	xorlw	1	; case 85
  1698  0221  1903               	skipnz
  1699  0222  294C               	goto	l1115
  1700  0223  3A03               	xorlw	3	; case 86
  1701  0224  1903               	skipnz
  1702  0225  2955               	goto	l1119
  1703  0226  3A01               	xorlw	1	; case 87
  1704  0227  1903               	skipnz
  1705  0228  2966               	goto	l1123
  1706  0229  3A0F               	xorlw	15	; case 88
  1707  022A  1903               	skipnz
  1708  022B  2977               	goto	l1127
  1709  022C  3A01               	xorlw	1	; case 89
  1710  022D  1903               	skipnz
  1711  022E  2988               	goto	l1131
  1712  022F  3A03               	xorlw	3	; case 90
  1713  0230  1903               	skipnz
  1714  0231  2999               	goto	l1135
  1715  0232  29B8               	goto	l1143
  1716  0233  29B8               	goto	l1143
  1717  0234                     l1151:	
  1718                           
  1719                           ;interrupt_wand.c: 308: }
  1720                           ;interrupt_wand.c: 309: lengthOfMessage = indexOfLetterSegments;
  1721  0234  1683               	bsf	3,5	;RP0=1, select bank1
  1722  0235  1303               	bcf	3,6	;RP1=0, select bank1
  1723  0236  0854               	movf	(convertMessageStringToSegments@indexOfLetterSegments+1)^(0+128),w
  1724  0237  1283               	bcf	3,5	;RP0=0, select bank0
  1725  0238  1303               	bcf	3,6	;RP1=0, select bank0
  1726  0239  00D5               	movwf	_lengthOfMessage+1
  1727  023A  1683               	bsf	3,5	;RP0=1, select bank1
  1728  023B  1303               	bcf	3,6	;RP1=0, select bank1
  1729  023C  0853               	movf	convertMessageStringToSegments@indexOfLetterSegments^(0+128),w
  1730  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1731  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1732  023F  00D4               	movwf	_lengthOfMessage
  1733  0240  0008               	return
  1734  0241                     __end_of_convertMessageStringToSegments:	
  1735                           
  1736                           	psect	text4
  1737  03CA                     __ptext4:	
  1738 ;; *************** function _ISR *****************
  1739 ;; Defined at:
  1740 ;;		line 85 in file "interrupt_wand.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  duration        2   50[BANK0 ] int 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      void 
  1747 ;; Registers used:
  1748 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1754 ;;      Params:         0       0       0       0
  1755 ;;      Locals:         0       2       0       0
  1756 ;;      Temps:          0       4       0       0
  1757 ;;      Totals:         0       6       0       0
  1758 ;;Total ram usage:        6 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    2
  1761 ;; This function calls:
  1762 ;;		___awtoft
  1763 ;;		___ftdiv
  1764 ;;		___ftmul
  1765 ;;		___fttol
  1766 ;; This function is called by:
  1767 ;;		Interrupt level 1
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           
  1772                           ;psect for function _ISR
  1773  03CA                     _ISR:	
  1774                           
  1775                           ;interrupt_wand.c: 89: T1CONbits.TMR1ON = 0;
  1776  03CA  1010               	bcf	16,0	;volatile
  1777                           
  1778                           ;interrupt_wand.c: 90: int duration = TMR1L + (256 * TMR1H);
  1779  03CB  080F               	movf	15,w	;volatile
  1780  03CC  00D3               	movwf	ISR@duration+1
  1781  03CD  080E               	movf	14,w	;volatile
  1782  03CE  00D2               	movwf	ISR@duration
  1783                           
  1784                           ;interrupt_wand.c: 91: T1CONbits.TMR1ON = 1;
  1785  03CF  1410               	bsf	16,0	;volatile
  1786                           
  1787                           ;interrupt_wand.c: 94: if (CM1CON0bits.C1OUT == 0) {
  1788  03D0  1283               	bcf	3,5	;RP0=0, select bank2
  1789  03D1  1703               	bsf	3,6	;RP1=1, select bank2
  1790  03D2  1B19               	btfsc	25,6	;volatile
  1791  03D3  2BEA               	goto	i1l66
  1792                           
  1793                           ;interrupt_wand.c: 95: if (duration > 14000) {
  1794  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  1795  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  1796  03D6  0853               	movf	ISR@duration+1,w
  1797  03D7  3A80               	xorlw	128
  1798  03D8  00FF               	movwf	127
  1799  03D9  30B6               	movlw	182
  1800  03DA  027F               	subwf	127,w
  1801  03DB  1D03               	skipz
  1802  03DC  2BDF               	goto	u106_25
  1803  03DD  30B1               	movlw	177
  1804  03DE  0252               	subwf	ISR@duration,w
  1805  03DF                     u106_25:	
  1806  03DF  1C03               	skipc
  1807  03E0  2C4E               	goto	i1l1403
  1808                           
  1809                           ;interrupt_wand.c: 97: timePerSegment = 0;
  1810  03E1  1683               	bsf	3,5	;RP0=1, select bank1
  1811  03E2  1303               	bcf	3,6	;RP1=0, select bank1
  1812  03E3  01DA               	clrf	_timePerSegment^(0+128)
  1813  03E4  01DB               	clrf	(_timePerSegment+1)^(0+128)
  1814                           
  1815                           ;interrupt_wand.c: 98: delayingVariable = 1;
  1816  03E5  3001               	movlw	1
  1817  03E6  00CE               	movwf	_delayingVariable^(0+128)
  1818  03E7  3000               	movlw	0
  1819  03E8  00CF               	movwf	(_delayingVariable^(0+128)+1)
  1820  03E9  2C48               	goto	L39
  1821  03EA                     i1l66:	
  1822                           ;interrupt_wand.c: 104: }
  1823                           ;interrupt_wand.c: 105: }
  1824                           
  1825                           ;interrupt_wand.c: 103: T1CONbits.TMR1ON = 1;
  1826                           
  1827                           ;interrupt_wand.c: 102: TMR1L = 0;
  1828                           
  1829                           ;interrupt_wand.c: 101: TMR1H = 0;
  1830                           
  1831                           ;interrupt_wand.c: 100: T1CONbits.TMR1ON = 0;
  1832                           
  1833                           
  1834                           ;interrupt_wand.c: 108: else if (CM1CON0bits.C1OUT == 1) {
  1835  03EA  1F19               	btfss	25,6	;volatile
  1836  03EB  2C4E               	goto	i1l1403
  1837                           
  1838                           ;interrupt_wand.c: 109: if (duration > 1500) {
  1839  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  1840  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  1841  03EE  0853               	movf	ISR@duration+1,w
  1842  03EF  3A80               	xorlw	128
  1843  03F0  00FF               	movwf	127
  1844  03F1  3085               	movlw	133
  1845  03F2  027F               	subwf	127,w
  1846  03F3  1D03               	skipz
  1847  03F4  2BF7               	goto	u108_25
  1848  03F5  30DD               	movlw	221
  1849  03F6  0252               	subwf	ISR@duration,w
  1850  03F7                     u108_25:	
  1851  03F7  1C03               	skipc
  1852  03F8  2C4E               	goto	i1l1403
  1853                           
  1854                           ;interrupt_wand.c: 111: timePerSegment = duration / (2.4 * lengthOfMessage);
  1855  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  1856  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  1857  03FB  0853               	movf	ISR@duration+1,w
  1858  03FC  00F9               	movwf	___awtoft@c+1
  1859  03FD  0852               	movf	ISR@duration,w
  1860  03FE  00F8               	movwf	___awtoft@c
  1861  03FF  118A  25E5  118A   	fcall	___awtoft
  1862  0402  0878               	movf	?___awtoft,w
  1863  0403  1283               	bcf	3,5	;RP0=0, select bank0
  1864  0404  1303               	bcf	3,6	;RP1=0, select bank0
  1865  0405  00B3               	movwf	___ftdiv@f1
  1866  0406  0879               	movf	?___awtoft+1,w
  1867  0407  00B4               	movwf	___ftdiv@f1+1
  1868  0408  087A               	movf	?___awtoft+2,w
  1869  0409  00B5               	movwf	___ftdiv@f1+2
  1870  040A  0855               	movf	_lengthOfMessage+1,w
  1871  040B  00F9               	movwf	___awtoft@c+1
  1872  040C  0854               	movf	_lengthOfMessage,w
  1873  040D  00F8               	movwf	___awtoft@c
  1874  040E  118A  25E5  118A   	fcall	___awtoft
  1875  0411  0878               	movf	?___awtoft,w
  1876  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0414  00A3               	movwf	___ftmul@f2
  1879  0415  0879               	movf	?___awtoft+1,w
  1880  0416  00A4               	movwf	___ftmul@f2+1
  1881  0417  087A               	movf	?___awtoft+2,w
  1882  0418  00A5               	movwf	___ftmul@f2+2
  1883  0419  309A               	movlw	154
  1884  041A  00A0               	movwf	___ftmul@f1
  1885  041B  3019               	movlw	25
  1886  041C  00A1               	movwf	___ftmul@f1+1
  1887  041D  3040               	movlw	64
  1888  041E  00A2               	movwf	___ftmul@f1+2
  1889  041F  118A  2241  118A   	fcall	___ftmul
  1890  0422  1283               	bcf	3,5	;RP0=0, select bank0
  1891  0423  1303               	bcf	3,6	;RP1=0, select bank0
  1892  0424  0820               	movf	?___ftmul,w
  1893  0425  00B0               	movwf	___ftdiv@f2
  1894  0426  0821               	movf	?___ftmul+1,w
  1895  0427  00B1               	movwf	___ftdiv@f2+1
  1896  0428  0822               	movf	?___ftmul+2,w
  1897  0429  00B2               	movwf	___ftdiv@f2+2
  1898  042A  118A  2313  118A   	fcall	___ftdiv
  1899  042D  1283               	bcf	3,5	;RP0=0, select bank0
  1900  042E  1303               	bcf	3,6	;RP1=0, select bank0
  1901  042F  0830               	movf	?___ftdiv,w
  1902  0430  00C0               	movwf	___fttol@f1
  1903  0431  0831               	movf	?___ftdiv+1,w
  1904  0432  00C1               	movwf	___fttol@f1+1
  1905  0433  0832               	movf	?___ftdiv+2,w
  1906  0434  00C2               	movwf	___fttol@f1+2
  1907  0435  118A  245C  118A   	fcall	___fttol
  1908  0438  1283               	bcf	3,5	;RP0=0, select bank0
  1909  0439  1303               	bcf	3,6	;RP1=0, select bank0
  1910  043A  0841               	movf	?___fttol+1,w
  1911  043B  1683               	bsf	3,5	;RP0=1, select bank1
  1912  043C  1303               	bcf	3,6	;RP1=0, select bank1
  1913  043D  00DB               	movwf	(_timePerSegment+1)^(0+128)
  1914  043E  1283               	bcf	3,5	;RP0=0, select bank0
  1915  043F  1303               	bcf	3,6	;RP1=0, select bank0
  1916  0440  0840               	movf	?___fttol,w
  1917  0441  1683               	bsf	3,5	;RP0=1, select bank1
  1918  0442  1303               	bcf	3,6	;RP1=0, select bank1
  1919  0443  00DA               	movwf	_timePerSegment^(0+128)
  1920                           
  1921                           ;interrupt_wand.c: 112: isSequenceRunning = 1;
  1922  0444  3001               	movlw	1
  1923  0445  00CC               	movwf	_isSequenceRunning^(0+128)
  1924  0446  3000               	movlw	0
  1925  0447  00CD               	movwf	(_isSequenceRunning^(0+128)+1)
  1926  0448                     L39:	
  1927                           
  1928                           ;interrupt_wand.c: 114: T1CONbits.TMR1ON = 0;
  1929  0448  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0449  1303               	bcf	3,6	;RP1=0, select bank0
  1931  044A  1010               	bcf	16,0	;volatile
  1932                           
  1933                           ;interrupt_wand.c: 115: TMR1H = 0;
  1934  044B  018F               	clrf	15	;volatile
  1935                           
  1936                           ;interrupt_wand.c: 116: TMR1L = 0;
  1937  044C  018E               	clrf	14	;volatile
  1938                           
  1939                           ;interrupt_wand.c: 117: T1CONbits.TMR1ON = 1;
  1940  044D  1410               	bsf	16,0	;volatile
  1941  044E                     i1l1403:	
  1942                           
  1943                           ;interrupt_wand.c: 118: }
  1944                           ;interrupt_wand.c: 119: }
  1945                           ;interrupt_wand.c: 121: PIR2bits.C1IF = 0;
  1946  044E  1283               	bcf	3,5	;RP0=0, select bank0
  1947  044F  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0450  128D               	bcf	13,5	;volatile
  1949  0451  0851               	movf	??_ISR+3,w
  1950  0452  00FF               	movwf	127
  1951  0453  0850               	movf	??_ISR+2,w
  1952  0454  008A               	movwf	10
  1953  0455  084F               	movf	??_ISR+1,w
  1954  0456  0084               	movwf	4
  1955  0457  0E4E               	swapf	??_ISR^0,w
  1956  0458  0083               	movwf	3
  1957  0459  0EFE               	swapf	126,f
  1958  045A  0E7E               	swapf	126,w
  1959  045B  0009               	retfie
  1960  045C                     __end_of_ISR:	
  1961                           
  1962                           	psect	intentry
  1963  0004                     __pintentry:	
  1964                           ;incstack = 0
  1965                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1966                           
  1967  0004                     interrupt_function:	
  1968  007E                     saved_w	set	btemp
  1969  0004  00FE               	movwf	btemp
  1970  0005  0E03               	swapf	3,w
  1971  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1972  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1973  0008  00CE               	movwf	??_ISR
  1974  0009  0804               	movf	4,w
  1975  000A  00CF               	movwf	??_ISR+1
  1976  000B  080A               	movf	10,w
  1977  000C  00D0               	movwf	??_ISR+2
  1978  000D  087F               	movf	btemp+1,w
  1979  000E  00D1               	movwf	??_ISR+3
  1980  000F  118A  2BCA         	ljmp	_ISR
  1981                           
  1982                           	psect	text5
  1983  045C                     __ptext5:	
  1984 ;; *************** function ___fttol *****************
  1985 ;; Defined at:
  1986 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  f1              3   32[BANK0 ] float 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  lval            4   41[BANK0 ] unsigned long 
  1991 ;;  exp1            1   45[BANK0 ] unsigned char 
  1992 ;;  sign1           1   40[BANK0 ] unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  4   32[BANK0 ] long 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2, status,0
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2002 ;;      Params:         0       4       0       0
  2003 ;;      Locals:         0       6       0       0
  2004 ;;      Temps:          0       4       0       0
  2005 ;;      Totals:         0      14       0       0
  2006 ;;Total ram usage:       14 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_ISR
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function ___fttol
  2017  045C                     ___fttol:	
  2018                           
  2019                           ;incstack = 0
  2020                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2021  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2022  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2023  045E  0840               	movf	___fttol@f1,w
  2024  045F  00C4               	movwf	??___fttol
  2025  0460  0841               	movf	___fttol@f1+1,w
  2026  0461  00C5               	movwf	??___fttol+1
  2027  0462  0842               	movf	___fttol@f1+2,w
  2028  0463  00C6               	movwf	??___fttol+2
  2029  0464  1003               	clrc
  2030  0465  0D45               	rlf	??___fttol+1,w
  2031  0466  0D46               	rlf	??___fttol+2,w
  2032  0467  00C7               	movwf	??___fttol+3
  2033  0468  0847               	movf	??___fttol+3,w
  2034  0469  00CD               	movwf	___fttol@exp1
  2035  046A  084D               	movf	___fttol@exp1,w
  2036  046B  1D03               	btfss	3,2
  2037  046C  2C76               	goto	i1l1279
  2038  046D  3000               	movlw	0
  2039  046E  00C3               	movwf	?___fttol+3
  2040  046F  3000               	movlw	0
  2041  0470  00C2               	movwf	?___fttol+2
  2042  0471  3000               	movlw	0
  2043  0472  00C1               	movwf	?___fttol+1
  2044  0473  3000               	movlw	0
  2045  0474  00C0               	movwf	?___fttol
  2046  0475  0008               	return
  2047  0476                     i1l1279:	
  2048  0476  0840               	movf	___fttol@f1,w
  2049  0477  00C4               	movwf	??___fttol
  2050  0478  0841               	movf	___fttol@f1+1,w
  2051  0479  00C5               	movwf	??___fttol+1
  2052  047A  0842               	movf	___fttol@f1+2,w
  2053  047B  00C6               	movwf	??___fttol+2
  2054  047C  3017               	movlw	23
  2055  047D                     u95_25:	
  2056  047D  1003               	clrc
  2057  047E  0CC6               	rrf	??___fttol+2,f
  2058  047F  0CC5               	rrf	??___fttol+1,f
  2059  0480  0CC4               	rrf	??___fttol,f
  2060  0481  3EFF               	addlw	-1
  2061  0482  1D03               	skipz
  2062  0483  2C7D               	goto	u95_25
  2063  0484  0844               	movf	??___fttol,w
  2064  0485  00C7               	movwf	??___fttol+3
  2065  0486  0847               	movf	??___fttol+3,w
  2066  0487  00C8               	movwf	___fttol@sign1
  2067  0488  17C1               	bsf	___fttol@f1+1,7
  2068  0489  30FF               	movlw	255
  2069  048A  05C0               	andwf	___fttol@f1,f
  2070  048B  30FF               	movlw	255
  2071  048C  05C1               	andwf	___fttol@f1+1,f
  2072  048D  3000               	movlw	0
  2073  048E  05C2               	andwf	___fttol@f1+2,f
  2074  048F  0840               	movf	___fttol@f1,w
  2075  0490  00C9               	movwf	___fttol@lval
  2076  0491  0841               	movf	___fttol@f1+1,w
  2077  0492  00CA               	movwf	___fttol@lval+1
  2078  0493  0842               	movf	___fttol@f1+2,w
  2079  0494  00CB               	movwf	___fttol@lval+2
  2080  0495  01CC               	clrf	___fttol@lval+3
  2081  0496  308E               	movlw	142
  2082  0497  02CD               	subwf	___fttol@exp1,f
  2083  0498  1FCD               	btfss	___fttol@exp1,7
  2084  0499  2CB8               	goto	i1l1299
  2085  049A  084D               	movf	___fttol@exp1,w
  2086  049B  3A80               	xorlw	128
  2087  049C  3E8F               	addlw	143
  2088  049D  1803               	skipnc
  2089  049E  2CA8               	goto	i1l1297
  2090  049F  3000               	movlw	0
  2091  04A0  00C3               	movwf	?___fttol+3
  2092  04A1  3000               	movlw	0
  2093  04A2  00C2               	movwf	?___fttol+2
  2094  04A3  3000               	movlw	0
  2095  04A4  00C1               	movwf	?___fttol+1
  2096  04A5  3000               	movlw	0
  2097  04A6  00C0               	movwf	?___fttol
  2098  04A7  0008               	return
  2099  04A8                     i1l1297:	
  2100  04A8  3001               	movlw	1
  2101  04A9                     u98_25:	
  2102  04A9  1003               	clrc
  2103  04AA  0CCC               	rrf	___fttol@lval+3,f
  2104  04AB  0CCB               	rrf	___fttol@lval+2,f
  2105  04AC  0CCA               	rrf	___fttol@lval+1,f
  2106  04AD  0CC9               	rrf	___fttol@lval,f
  2107  04AE  3EFF               	addlw	-1
  2108  04AF  1D03               	skipz
  2109  04B0  2CA9               	goto	u98_25
  2110  04B1  3001               	movlw	1
  2111  04B2  00C4               	movwf	??___fttol
  2112  04B3  0844               	movf	??___fttol,w
  2113  04B4  07CD               	addwf	___fttol@exp1,f
  2114  04B5  1903               	btfsc	3,2
  2115  04B6  2CD3               	goto	i1l1307
  2116  04B7  2CA8               	goto	i1l1297
  2117  04B8                     i1l1299:	
  2118  04B8  3018               	movlw	24
  2119  04B9  024D               	subwf	___fttol@exp1,w
  2120  04BA  1C03               	skipc
  2121  04BB  2CD0               	goto	i1l453
  2122  04BC  3000               	movlw	0
  2123  04BD  00C3               	movwf	?___fttol+3
  2124  04BE  3000               	movlw	0
  2125  04BF  00C2               	movwf	?___fttol+2
  2126  04C0  3000               	movlw	0
  2127  04C1  00C1               	movwf	?___fttol+1
  2128  04C2  3000               	movlw	0
  2129  04C3  00C0               	movwf	?___fttol
  2130  04C4  0008               	return
  2131  04C5                     i1l1305:	
  2132  04C5  3001               	movlw	1
  2133  04C6  00C4               	movwf	??___fttol
  2134  04C7                     u101_25:	
  2135  04C7  1003               	clrc
  2136  04C8  0DC9               	rlf	___fttol@lval,f
  2137  04C9  0DCA               	rlf	___fttol@lval+1,f
  2138  04CA  0DCB               	rlf	___fttol@lval+2,f
  2139  04CB  0DCC               	rlf	___fttol@lval+3,f
  2140  04CC  0BC4               	decfsz	??___fttol,f
  2141  04CD  2CC7               	goto	u101_25
  2142  04CE  3001               	movlw	1
  2143  04CF  02CD               	subwf	___fttol@exp1,f
  2144  04D0                     i1l453:	
  2145  04D0  084D               	movf	___fttol@exp1,w
  2146  04D1  1D03               	btfss	3,2
  2147  04D2  2CC5               	goto	i1l1305
  2148  04D3                     i1l1307:	
  2149  04D3  0848               	movf	___fttol@sign1,w
  2150  04D4  1903               	btfsc	3,2
  2151  04D5  2CE1               	goto	i1l1311
  2152  04D6  09C9               	comf	___fttol@lval,f
  2153  04D7  09CA               	comf	___fttol@lval+1,f
  2154  04D8  09CB               	comf	___fttol@lval+2,f
  2155  04D9  09CC               	comf	___fttol@lval+3,f
  2156  04DA  0AC9               	incf	___fttol@lval,f
  2157  04DB  1903               	skipnz
  2158  04DC  0ACA               	incf	___fttol@lval+1,f
  2159  04DD  1903               	skipnz
  2160  04DE  0ACB               	incf	___fttol@lval+2,f
  2161  04DF  1903               	skipnz
  2162  04E0  0ACC               	incf	___fttol@lval+3,f
  2163  04E1                     i1l1311:	
  2164  04E1  084C               	movf	___fttol@lval+3,w
  2165  04E2  00C3               	movwf	?___fttol+3
  2166  04E3  084B               	movf	___fttol@lval+2,w
  2167  04E4  00C2               	movwf	?___fttol+2
  2168  04E5  084A               	movf	___fttol@lval+1,w
  2169  04E6  00C1               	movwf	?___fttol+1
  2170  04E7  0849               	movf	___fttol@lval,w
  2171  04E8  00C0               	movwf	?___fttol
  2172  04E9  0008               	return
  2173  04EA                     __end_of___fttol:	
  2174                           
  2175                           	psect	text6
  2176  0241                     __ptext6:	
  2177 ;; *************** function ___ftmul *****************
  2178 ;; Defined at:
  2179 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  f1              3    0[BANK0 ] float 
  2182 ;;  f2              3    3[BANK0 ] float 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  2185 ;;  sign            1   15[BANK0 ] unsigned char 
  2186 ;;  cntr            1   14[BANK0 ] unsigned char 
  2187 ;;  exp             1   10[BANK0 ] unsigned char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  3    0[BANK0 ] float 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0, pclath, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2197 ;;      Params:         0       6       0       0
  2198 ;;      Locals:         0       6       0       0
  2199 ;;      Temps:          0       4       0       0
  2200 ;;      Totals:         0      16       0       0
  2201 ;;Total ram usage:       16 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    1
  2204 ;; This function calls:
  2205 ;;		___ftpack
  2206 ;; This function is called by:
  2207 ;;		_ISR
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function ___ftmul
  2213  0241                     ___ftmul:	
  2214                           
  2215                           ;incstack = 0
  2216                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2217  0241  1283               	bcf	3,5	;RP0=0, select bank0
  2218  0242  1303               	bcf	3,6	;RP1=0, select bank0
  2219  0243  0820               	movf	___ftmul@f1,w
  2220  0244  00A6               	movwf	??___ftmul
  2221  0245  0821               	movf	___ftmul@f1+1,w
  2222  0246  00A7               	movwf	??___ftmul+1
  2223  0247  0822               	movf	___ftmul@f1+2,w
  2224  0248  00A8               	movwf	??___ftmul+2
  2225  0249  1003               	clrc
  2226  024A  0D27               	rlf	??___ftmul+1,w
  2227  024B  0D28               	rlf	??___ftmul+2,w
  2228  024C  00A9               	movwf	??___ftmul+3
  2229  024D  0829               	movf	??___ftmul+3,w
  2230  024E  00AA               	movwf	___ftmul@exp
  2231  024F  082A               	movf	___ftmul@exp,w
  2232  0250  1D03               	btfss	3,2
  2233  0251  2A59               	goto	i1l1229
  2234  0252  3000               	movlw	0
  2235  0253  00A0               	movwf	?___ftmul
  2236  0254  3000               	movlw	0
  2237  0255  00A1               	movwf	?___ftmul+1
  2238  0256  3000               	movlw	0
  2239  0257  00A2               	movwf	?___ftmul+2
  2240  0258  0008               	return
  2241  0259                     i1l1229:	
  2242  0259  0823               	movf	___ftmul@f2,w
  2243  025A  00A6               	movwf	??___ftmul
  2244  025B  0824               	movf	___ftmul@f2+1,w
  2245  025C  00A7               	movwf	??___ftmul+1
  2246  025D  0825               	movf	___ftmul@f2+2,w
  2247  025E  00A8               	movwf	??___ftmul+2
  2248  025F  1003               	clrc
  2249  0260  0D27               	rlf	??___ftmul+1,w
  2250  0261  0D28               	rlf	??___ftmul+2,w
  2251  0262  00A9               	movwf	??___ftmul+3
  2252  0263  0829               	movf	??___ftmul+3,w
  2253  0264  00AF               	movwf	___ftmul@sign
  2254  0265  082F               	movf	___ftmul@sign,w
  2255  0266  1D03               	btfss	3,2
  2256  0267  2A6F               	goto	i1l1235
  2257  0268  3000               	movlw	0
  2258  0269  00A0               	movwf	?___ftmul
  2259  026A  3000               	movlw	0
  2260  026B  00A1               	movwf	?___ftmul+1
  2261  026C  3000               	movlw	0
  2262  026D  00A2               	movwf	?___ftmul+2
  2263  026E  0008               	return
  2264  026F                     i1l1235:	
  2265  026F  082F               	movf	___ftmul@sign,w
  2266  0270  3E7B               	addlw	123
  2267  0271  00A6               	movwf	??___ftmul
  2268  0272  0826               	movf	??___ftmul,w
  2269  0273  07AA               	addwf	___ftmul@exp,f
  2270  0274  0820               	movf	___ftmul@f1,w
  2271  0275  00A6               	movwf	??___ftmul
  2272  0276  0821               	movf	___ftmul@f1+1,w
  2273  0277  00A7               	movwf	??___ftmul+1
  2274  0278  0822               	movf	___ftmul@f1+2,w
  2275  0279  00A8               	movwf	??___ftmul+2
  2276  027A  3010               	movlw	16
  2277  027B                     u82_25:	
  2278  027B  1003               	clrc
  2279  027C  0CA8               	rrf	??___ftmul+2,f
  2280  027D  0CA7               	rrf	??___ftmul+1,f
  2281  027E  0CA6               	rrf	??___ftmul,f
  2282  027F  3EFF               	addlw	-1
  2283  0280  1D03               	skipz
  2284  0281  2A7B               	goto	u82_25
  2285  0282  0826               	movf	??___ftmul,w
  2286  0283  00A9               	movwf	??___ftmul+3
  2287  0284  0829               	movf	??___ftmul+3,w
  2288  0285  00AF               	movwf	___ftmul@sign
  2289  0286  0823               	movf	___ftmul@f2,w
  2290  0287  00A6               	movwf	??___ftmul
  2291  0288  0824               	movf	___ftmul@f2+1,w
  2292  0289  00A7               	movwf	??___ftmul+1
  2293  028A  0825               	movf	___ftmul@f2+2,w
  2294  028B  00A8               	movwf	??___ftmul+2
  2295  028C  3010               	movlw	16
  2296  028D                     u83_25:	
  2297  028D  1003               	clrc
  2298  028E  0CA8               	rrf	??___ftmul+2,f
  2299  028F  0CA7               	rrf	??___ftmul+1,f
  2300  0290  0CA6               	rrf	??___ftmul,f
  2301  0291  3EFF               	addlw	-1
  2302  0292  1D03               	skipz
  2303  0293  2A8D               	goto	u83_25
  2304  0294  0826               	movf	??___ftmul,w
  2305  0295  00A9               	movwf	??___ftmul+3
  2306  0296  0829               	movf	??___ftmul+3,w
  2307  0297  06AF               	xorwf	___ftmul@sign,f
  2308  0298  3080               	movlw	128
  2309  0299  00A6               	movwf	??___ftmul
  2310  029A  0826               	movf	??___ftmul,w
  2311  029B  05AF               	andwf	___ftmul@sign,f
  2312  029C  17A1               	bsf	___ftmul@f1+1,7
  2313  029D  17A4               	bsf	___ftmul@f2+1,7
  2314  029E  30FF               	movlw	255
  2315  029F  05A3               	andwf	___ftmul@f2,f
  2316  02A0  30FF               	movlw	255
  2317  02A1  05A4               	andwf	___ftmul@f2+1,f
  2318  02A2  3000               	movlw	0
  2319  02A3  05A5               	andwf	___ftmul@f2+2,f
  2320  02A4  3000               	movlw	0
  2321  02A5  00AB               	movwf	___ftmul@f3_as_product
  2322  02A6  3000               	movlw	0
  2323  02A7  00AC               	movwf	___ftmul@f3_as_product+1
  2324  02A8  3000               	movlw	0
  2325  02A9  00AD               	movwf	___ftmul@f3_as_product+2
  2326  02AA  3007               	movlw	7
  2327  02AB  00A6               	movwf	??___ftmul
  2328  02AC  0826               	movf	??___ftmul,w
  2329  02AD  00AE               	movwf	___ftmul@cntr
  2330  02AE                     i1l1247:	
  2331  02AE  1C20               	btfss	___ftmul@f1,0
  2332  02AF  2ABE               	goto	i1l1251
  2333  02B0  0823               	movf	___ftmul@f2,w
  2334  02B1  07AB               	addwf	___ftmul@f3_as_product,f
  2335  02B2  0824               	movf	___ftmul@f2+1,w
  2336  02B3  1103               	clrz
  2337  02B4  1803               	skipnc
  2338  02B5  0A24               	incf	___ftmul@f2+1,w
  2339  02B6  1D03               	btfss	3,2
  2340  02B7  07AC               	addwf	___ftmul@f3_as_product+1,f
  2341  02B8  0825               	movf	___ftmul@f2+2,w
  2342  02B9  1103               	clrz
  2343  02BA  1803               	skipnc
  2344  02BB  0A25               	incf	___ftmul@f2+2,w
  2345  02BC  1D03               	btfss	3,2
  2346  02BD  07AD               	addwf	___ftmul@f3_as_product+2,f
  2347  02BE                     i1l1251:	
  2348  02BE  3001               	movlw	1
  2349  02BF                     u86_25:	
  2350  02BF  1003               	clrc
  2351  02C0  0CA2               	rrf	___ftmul@f1+2,f
  2352  02C1  0CA1               	rrf	___ftmul@f1+1,f
  2353  02C2  0CA0               	rrf	___ftmul@f1,f
  2354  02C3  3EFF               	addlw	-1
  2355  02C4  1D03               	skipz
  2356  02C5  2ABF               	goto	u86_25
  2357  02C6  3001               	movlw	1
  2358  02C7                     u87_25:	
  2359  02C7  1003               	clrc
  2360  02C8  0DA3               	rlf	___ftmul@f2,f
  2361  02C9  0DA4               	rlf	___ftmul@f2+1,f
  2362  02CA  0DA5               	rlf	___ftmul@f2+2,f
  2363  02CB  3EFF               	addlw	-1
  2364  02CC  1D03               	skipz
  2365  02CD  2AC7               	goto	u87_25
  2366  02CE  3001               	movlw	1
  2367  02CF  02AE               	subwf	___ftmul@cntr,f
  2368  02D0  1D03               	btfss	3,2
  2369  02D1  2AAE               	goto	i1l1247
  2370  02D2  3009               	movlw	9
  2371  02D3  00A6               	movwf	??___ftmul
  2372  02D4  0826               	movf	??___ftmul,w
  2373  02D5  00AE               	movwf	___ftmul@cntr
  2374  02D6                     i1l1259:	
  2375  02D6  1C20               	btfss	___ftmul@f1,0
  2376  02D7  2AE6               	goto	i1l1263
  2377  02D8  0823               	movf	___ftmul@f2,w
  2378  02D9  07AB               	addwf	___ftmul@f3_as_product,f
  2379  02DA  0824               	movf	___ftmul@f2+1,w
  2380  02DB  1103               	clrz
  2381  02DC  1803               	skipnc
  2382  02DD  0A24               	incf	___ftmul@f2+1,w
  2383  02DE  1D03               	btfss	3,2
  2384  02DF  07AC               	addwf	___ftmul@f3_as_product+1,f
  2385  02E0  0825               	movf	___ftmul@f2+2,w
  2386  02E1  1103               	clrz
  2387  02E2  1803               	skipnc
  2388  02E3  0A25               	incf	___ftmul@f2+2,w
  2389  02E4  1D03               	btfss	3,2
  2390  02E5  07AD               	addwf	___ftmul@f3_as_product+2,f
  2391  02E6                     i1l1263:	
  2392  02E6  3001               	movlw	1
  2393  02E7                     u91_25:	
  2394  02E7  1003               	clrc
  2395  02E8  0CA2               	rrf	___ftmul@f1+2,f
  2396  02E9  0CA1               	rrf	___ftmul@f1+1,f
  2397  02EA  0CA0               	rrf	___ftmul@f1,f
  2398  02EB  3EFF               	addlw	-1
  2399  02EC  1D03               	skipz
  2400  02ED  2AE7               	goto	u91_25
  2401  02EE  3001               	movlw	1
  2402  02EF                     u92_25:	
  2403  02EF  1003               	clrc
  2404  02F0  0CAD               	rrf	___ftmul@f3_as_product+2,f
  2405  02F1  0CAC               	rrf	___ftmul@f3_as_product+1,f
  2406  02F2  0CAB               	rrf	___ftmul@f3_as_product,f
  2407  02F3  3EFF               	addlw	-1
  2408  02F4  1D03               	skipz
  2409  02F5  2AEF               	goto	u92_25
  2410  02F6  3001               	movlw	1
  2411  02F7  02AE               	subwf	___ftmul@cntr,f
  2412  02F8  1D03               	btfss	3,2
  2413  02F9  2AD6               	goto	i1l1259
  2414  02FA  082B               	movf	___ftmul@f3_as_product,w
  2415  02FB  00F0               	movwf	___ftpack@arg
  2416  02FC  082C               	movf	___ftmul@f3_as_product+1,w
  2417  02FD  00F1               	movwf	___ftpack@arg+1
  2418  02FE  082D               	movf	___ftmul@f3_as_product+2,w
  2419  02FF  00F2               	movwf	___ftpack@arg+2
  2420  0300  082A               	movf	___ftmul@exp,w
  2421  0301  00A6               	movwf	??___ftmul
  2422  0302  0826               	movf	??___ftmul,w
  2423  0303  00F3               	movwf	___ftpack@exp
  2424  0304  082F               	movf	___ftmul@sign,w
  2425  0305  00A7               	movwf	??___ftmul+1
  2426  0306  0827               	movf	??___ftmul+1,w
  2427  0307  00F4               	movwf	___ftpack@sign
  2428  0308  118A  24EA         	fcall	___ftpack
  2429  030A  0870               	movf	?___ftpack,w
  2430  030B  1283               	bcf	3,5	;RP0=0, select bank0
  2431  030C  1303               	bcf	3,6	;RP1=0, select bank0
  2432  030D  00A0               	movwf	?___ftmul
  2433  030E  0871               	movf	?___ftpack+1,w
  2434  030F  00A1               	movwf	?___ftmul+1
  2435  0310  0872               	movf	?___ftpack+2,w
  2436  0311  00A2               	movwf	?___ftmul+2
  2437  0312  0008               	return
  2438  0313                     __end_of___ftmul:	
  2439                           
  2440                           	psect	text7
  2441  0313                     __ptext7:	
  2442 ;; *************** function ___ftdiv *****************
  2443 ;; Defined at:
  2444 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  f2              3   16[BANK0 ] float 
  2447 ;;  f1              3   19[BANK0 ] float 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  f3              3   27[BANK0 ] float 
  2450 ;;  sign            1   31[BANK0 ] unsigned char 
  2451 ;;  exp             1   30[BANK0 ] unsigned char 
  2452 ;;  cntr            1   26[BANK0 ] unsigned char 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  3   16[BANK0 ] float 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2462 ;;      Params:         0       6       0       0
  2463 ;;      Locals:         0       6       0       0
  2464 ;;      Temps:          0       4       0       0
  2465 ;;      Totals:         0      16       0       0
  2466 ;;Total ram usage:       16 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    1
  2469 ;; This function calls:
  2470 ;;		___ftpack
  2471 ;; This function is called by:
  2472 ;;		_ISR
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           
  2477                           ;psect for function ___ftdiv
  2478  0313                     ___ftdiv:	
  2479                           
  2480                           ;incstack = 0
  2481                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2482  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2483  0314  1303               	bcf	3,6	;RP1=0, select bank0
  2484  0315  0833               	movf	___ftdiv@f1,w
  2485  0316  00B6               	movwf	??___ftdiv
  2486  0317  0834               	movf	___ftdiv@f1+1,w
  2487  0318  00B7               	movwf	??___ftdiv+1
  2488  0319  0835               	movf	___ftdiv@f1+2,w
  2489  031A  00B8               	movwf	??___ftdiv+2
  2490  031B  1003               	clrc
  2491  031C  0D37               	rlf	??___ftdiv+1,w
  2492  031D  0D38               	rlf	??___ftdiv+2,w
  2493  031E  00B9               	movwf	??___ftdiv+3
  2494  031F  0839               	movf	??___ftdiv+3,w
  2495  0320  00BE               	movwf	___ftdiv@exp
  2496  0321  083E               	movf	___ftdiv@exp,w
  2497  0322  1D03               	btfss	3,2
  2498  0323  2B2B               	goto	i1l1187
  2499  0324  3000               	movlw	0
  2500  0325  00B0               	movwf	?___ftdiv
  2501  0326  3000               	movlw	0
  2502  0327  00B1               	movwf	?___ftdiv+1
  2503  0328  3000               	movlw	0
  2504  0329  00B2               	movwf	?___ftdiv+2
  2505  032A  0008               	return
  2506  032B                     i1l1187:	
  2507  032B  0830               	movf	___ftdiv@f2,w
  2508  032C  00B6               	movwf	??___ftdiv
  2509  032D  0831               	movf	___ftdiv@f2+1,w
  2510  032E  00B7               	movwf	??___ftdiv+1
  2511  032F  0832               	movf	___ftdiv@f2+2,w
  2512  0330  00B8               	movwf	??___ftdiv+2
  2513  0331  1003               	clrc
  2514  0332  0D37               	rlf	??___ftdiv+1,w
  2515  0333  0D38               	rlf	??___ftdiv+2,w
  2516  0334  00B9               	movwf	??___ftdiv+3
  2517  0335  0839               	movf	??___ftdiv+3,w
  2518  0336  00BF               	movwf	___ftdiv@sign
  2519  0337  083F               	movf	___ftdiv@sign,w
  2520  0338  1D03               	btfss	3,2
  2521  0339  2B41               	goto	i1l1193
  2522  033A  3000               	movlw	0
  2523  033B  00B0               	movwf	?___ftdiv
  2524  033C  3000               	movlw	0
  2525  033D  00B1               	movwf	?___ftdiv+1
  2526  033E  3000               	movlw	0
  2527  033F  00B2               	movwf	?___ftdiv+2
  2528  0340  0008               	return
  2529  0341                     i1l1193:	
  2530  0341  3000               	movlw	0
  2531  0342  00BB               	movwf	___ftdiv@f3
  2532  0343  3000               	movlw	0
  2533  0344  00BC               	movwf	___ftdiv@f3+1
  2534  0345  3000               	movlw	0
  2535  0346  00BD               	movwf	___ftdiv@f3+2
  2536  0347  3089               	movlw	137
  2537  0348  073F               	addwf	___ftdiv@sign,w
  2538  0349  00B6               	movwf	??___ftdiv
  2539  034A  0836               	movf	??___ftdiv,w
  2540  034B  02BE               	subwf	___ftdiv@exp,f
  2541  034C  0833               	movf	___ftdiv@f1,w
  2542  034D  00B6               	movwf	??___ftdiv
  2543  034E  0834               	movf	___ftdiv@f1+1,w
  2544  034F  00B7               	movwf	??___ftdiv+1
  2545  0350  0835               	movf	___ftdiv@f1+2,w
  2546  0351  00B8               	movwf	??___ftdiv+2
  2547  0352  3010               	movlw	16
  2548  0353                     u74_25:	
  2549  0353  1003               	clrc
  2550  0354  0CB8               	rrf	??___ftdiv+2,f
  2551  0355  0CB7               	rrf	??___ftdiv+1,f
  2552  0356  0CB6               	rrf	??___ftdiv,f
  2553  0357  3EFF               	addlw	-1
  2554  0358  1D03               	skipz
  2555  0359  2B53               	goto	u74_25
  2556  035A  0836               	movf	??___ftdiv,w
  2557  035B  00B9               	movwf	??___ftdiv+3
  2558  035C  0839               	movf	??___ftdiv+3,w
  2559  035D  00BF               	movwf	___ftdiv@sign
  2560  035E  0830               	movf	___ftdiv@f2,w
  2561  035F  00B6               	movwf	??___ftdiv
  2562  0360  0831               	movf	___ftdiv@f2+1,w
  2563  0361  00B7               	movwf	??___ftdiv+1
  2564  0362  0832               	movf	___ftdiv@f2+2,w
  2565  0363  00B8               	movwf	??___ftdiv+2
  2566  0364  3010               	movlw	16
  2567  0365                     u75_25:	
  2568  0365  1003               	clrc
  2569  0366  0CB8               	rrf	??___ftdiv+2,f
  2570  0367  0CB7               	rrf	??___ftdiv+1,f
  2571  0368  0CB6               	rrf	??___ftdiv,f
  2572  0369  3EFF               	addlw	-1
  2573  036A  1D03               	skipz
  2574  036B  2B65               	goto	u75_25
  2575  036C  0836               	movf	??___ftdiv,w
  2576  036D  00B9               	movwf	??___ftdiv+3
  2577  036E  0839               	movf	??___ftdiv+3,w
  2578  036F  06BF               	xorwf	___ftdiv@sign,f
  2579  0370  3080               	movlw	128
  2580  0371  00B6               	movwf	??___ftdiv
  2581  0372  0836               	movf	??___ftdiv,w
  2582  0373  05BF               	andwf	___ftdiv@sign,f
  2583  0374  17B4               	bsf	___ftdiv@f1+1,7
  2584  0375  30FF               	movlw	255
  2585  0376  05B3               	andwf	___ftdiv@f1,f
  2586  0377  30FF               	movlw	255
  2587  0378  05B4               	andwf	___ftdiv@f1+1,f
  2588  0379  3000               	movlw	0
  2589  037A  05B5               	andwf	___ftdiv@f1+2,f
  2590  037B  17B1               	bsf	___ftdiv@f2+1,7
  2591  037C  30FF               	movlw	255
  2592  037D  05B0               	andwf	___ftdiv@f2,f
  2593  037E  30FF               	movlw	255
  2594  037F  05B1               	andwf	___ftdiv@f2+1,f
  2595  0380  3000               	movlw	0
  2596  0381  05B2               	andwf	___ftdiv@f2+2,f
  2597  0382  3018               	movlw	24
  2598  0383  00B6               	movwf	??___ftdiv
  2599  0384  0836               	movf	??___ftdiv,w
  2600  0385  00BA               	movwf	___ftdiv@cntr
  2601  0386                     i1l1207:	
  2602  0386  3001               	movlw	1
  2603  0387                     u76_25:	
  2604  0387  1003               	clrc
  2605  0388  0DBB               	rlf	___ftdiv@f3,f
  2606  0389  0DBC               	rlf	___ftdiv@f3+1,f
  2607  038A  0DBD               	rlf	___ftdiv@f3+2,f
  2608  038B  3EFF               	addlw	-1
  2609  038C  1D03               	skipz
  2610  038D  2B87               	goto	u76_25
  2611  038E  0832               	movf	___ftdiv@f2+2,w
  2612  038F  0235               	subwf	___ftdiv@f1+2,w
  2613  0390  1D03               	skipz
  2614  0391  2B98               	goto	u77_25
  2615  0392  0831               	movf	___ftdiv@f2+1,w
  2616  0393  0234               	subwf	___ftdiv@f1+1,w
  2617  0394  1D03               	skipz
  2618  0395  2B98               	goto	u77_25
  2619  0396  0830               	movf	___ftdiv@f2,w
  2620  0397  0233               	subwf	___ftdiv@f1,w
  2621  0398                     u77_25:	
  2622  0398  1C03               	skipc
  2623  0399  2BA5               	goto	i1l1215
  2624  039A  0830               	movf	___ftdiv@f2,w
  2625  039B  02B3               	subwf	___ftdiv@f1,f
  2626  039C  0831               	movf	___ftdiv@f2+1,w
  2627  039D  1C03               	skipc
  2628  039E  0F31               	incfsz	___ftdiv@f2+1,w
  2629  039F  02B4               	subwf	___ftdiv@f1+1,f
  2630  03A0  0832               	movf	___ftdiv@f2+2,w
  2631  03A1  1C03               	skipc
  2632  03A2  0A32               	incf	___ftdiv@f2+2,w
  2633  03A3  02B5               	subwf	___ftdiv@f1+2,f
  2634  03A4  143B               	bsf	___ftdiv@f3,0
  2635  03A5                     i1l1215:	
  2636  03A5  3001               	movlw	1
  2637  03A6                     u78_25:	
  2638  03A6  1003               	clrc
  2639  03A7  0DB3               	rlf	___ftdiv@f1,f
  2640  03A8  0DB4               	rlf	___ftdiv@f1+1,f
  2641  03A9  0DB5               	rlf	___ftdiv@f1+2,f
  2642  03AA  3EFF               	addlw	-1
  2643  03AB  1D03               	skipz
  2644  03AC  2BA6               	goto	u78_25
  2645  03AD  3001               	movlw	1
  2646  03AE  02BA               	subwf	___ftdiv@cntr,f
  2647  03AF  1D03               	btfss	3,2
  2648  03B0  2B86               	goto	i1l1207
  2649  03B1  083B               	movf	___ftdiv@f3,w
  2650  03B2  00F0               	movwf	___ftpack@arg
  2651  03B3  083C               	movf	___ftdiv@f3+1,w
  2652  03B4  00F1               	movwf	___ftpack@arg+1
  2653  03B5  083D               	movf	___ftdiv@f3+2,w
  2654  03B6  00F2               	movwf	___ftpack@arg+2
  2655  03B7  083E               	movf	___ftdiv@exp,w
  2656  03B8  00B6               	movwf	??___ftdiv
  2657  03B9  0836               	movf	??___ftdiv,w
  2658  03BA  00F3               	movwf	___ftpack@exp
  2659  03BB  083F               	movf	___ftdiv@sign,w
  2660  03BC  00B7               	movwf	??___ftdiv+1
  2661  03BD  0837               	movf	??___ftdiv+1,w
  2662  03BE  00F4               	movwf	___ftpack@sign
  2663  03BF  118A  24EA         	fcall	___ftpack
  2664  03C1  0870               	movf	?___ftpack,w
  2665  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  2666  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  2667  03C4  00B0               	movwf	?___ftdiv
  2668  03C5  0871               	movf	?___ftpack+1,w
  2669  03C6  00B1               	movwf	?___ftdiv+1
  2670  03C7  0872               	movf	?___ftpack+2,w
  2671  03C8  00B2               	movwf	?___ftdiv+2
  2672  03C9  0008               	return
  2673  03CA                     __end_of___ftdiv:	
  2674                           
  2675                           	psect	text8
  2676  05E5                     __ptext8:	
  2677 ;; *************** function ___awtoft *****************
  2678 ;; Defined at:
  2679 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  c               2    8[COMMON] int 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  sign            1   13[COMMON] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  3    8[COMMON] float 
  2686 ;; Registers used:
  2687 ;;		wreg, status,2, status,0, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2693 ;;      Params:         3       0       0       0
  2694 ;;      Locals:         1       0       0       0
  2695 ;;      Temps:          2       0       0       0
  2696 ;;      Totals:         6       0       0       0
  2697 ;;Total ram usage:        6 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    1
  2700 ;; This function calls:
  2701 ;;		___ftpack
  2702 ;; This function is called by:
  2703 ;;		_ISR
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function ___awtoft
  2709  05E5                     ___awtoft:	
  2710                           
  2711                           ;incstack = 0
  2712                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  2713  05E5  01FD               	clrf	___awtoft@sign
  2714  05E6  1FF9               	btfss	___awtoft@c+1,7
  2715  05E7  2DEF               	goto	i1l1177
  2716  05E8  09F8               	comf	___awtoft@c,f
  2717  05E9  09F9               	comf	___awtoft@c+1,f
  2718  05EA  0AF8               	incf	___awtoft@c,f
  2719  05EB  1903               	skipnz
  2720  05EC  0AF9               	incf	___awtoft@c+1,f
  2721  05ED  01FD               	clrf	___awtoft@sign
  2722  05EE  0AFD               	incf	___awtoft@sign,f
  2723  05EF                     i1l1177:	
  2724  05EF  0878               	movf	___awtoft@c,w
  2725  05F0  00F0               	movwf	___ftpack@arg
  2726  05F1  0879               	movf	___awtoft@c+1,w
  2727  05F2  00F1               	movwf	___ftpack@arg+1
  2728  05F3  01F2               	clrf	___ftpack@arg+2
  2729  05F4  308E               	movlw	142
  2730  05F5  00FB               	movwf	??___awtoft
  2731  05F6  087B               	movf	??___awtoft,w
  2732  05F7  00F3               	movwf	___ftpack@exp
  2733  05F8  087D               	movf	___awtoft@sign,w
  2734  05F9  00FC               	movwf	??___awtoft+1
  2735  05FA  087C               	movf	??___awtoft+1,w
  2736  05FB  00F4               	movwf	___ftpack@sign
  2737  05FC  118A  24EA         	fcall	___ftpack
  2738  05FE  0870               	movf	?___ftpack,w
  2739  05FF  00F8               	movwf	?___awtoft
  2740  0600  0871               	movf	?___ftpack+1,w
  2741  0601  00F9               	movwf	?___awtoft+1
  2742  0602  0872               	movf	?___ftpack+2,w
  2743  0603  00FA               	movwf	?___awtoft+2
  2744  0604  0008               	return
  2745  0605                     __end_of___awtoft:	
  2746                           
  2747                           	psect	text9
  2748  04EA                     __ptext9:	
  2749 ;; *************** function ___ftpack *****************
  2750 ;; Defined at:
  2751 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  arg             3    0[COMMON] unsigned um
  2754 ;;  exp             1    3[COMMON] unsigned char 
  2755 ;;  sign            1    4[COMMON] unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  3    0[COMMON] float 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2, status,0
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2767 ;;      Params:         5       0       0       0
  2768 ;;      Locals:         0       0       0       0
  2769 ;;      Temps:          3       0       0       0
  2770 ;;      Totals:         8       0       0       0
  2771 ;;Total ram usage:        8 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		___awtoft
  2777 ;;		___ftdiv
  2778 ;;		___ftmul
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           
  2783                           ;psect for function ___ftpack
  2784  04EA                     ___ftpack:	
  2785                           
  2786                           ;incstack = 0
  2787                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2788  04EA  0873               	movf	___ftpack@exp,w
  2789  04EB  1903               	btfsc	3,2
  2790  04EC  2CF2               	goto	i1l1001
  2791  04ED  0872               	movf	___ftpack@arg+2,w
  2792  04EE  0471               	iorwf	___ftpack@arg+1,w
  2793  04EF  0470               	iorwf	___ftpack@arg,w
  2794  04F0  1D03               	skipz
  2795  04F1  2D05               	goto	i1l1007
  2796  04F2                     i1l1001:	
  2797  04F2  3000               	movlw	0
  2798  04F3  00F0               	movwf	?___ftpack
  2799  04F4  3000               	movlw	0
  2800  04F5  00F1               	movwf	?___ftpack+1
  2801  04F6  3000               	movlw	0
  2802  04F7  00F2               	movwf	?___ftpack+2
  2803  04F8  0008               	return
  2804  04F9                     i1l1005:	
  2805  04F9  3001               	movlw	1
  2806  04FA  00F5               	movwf	??___ftpack
  2807  04FB  0875               	movf	??___ftpack,w
  2808  04FC  07F3               	addwf	___ftpack@exp,f
  2809  04FD  3001               	movlw	1
  2810  04FE                     u58_25:	
  2811  04FE  1003               	clrc
  2812  04FF  0CF2               	rrf	___ftpack@arg+2,f
  2813  0500  0CF1               	rrf	___ftpack@arg+1,f
  2814  0501  0CF0               	rrf	___ftpack@arg,f
  2815  0502  3EFF               	addlw	-1
  2816  0503  1D03               	skipz
  2817  0504  2CFE               	goto	u58_25
  2818  0505                     i1l1007:	
  2819  0505  30FE               	movlw	254
  2820  0506  0572               	andwf	___ftpack@arg+2,w
  2821  0507  1903               	btfsc	3,2
  2822  0508  2D20               	goto	i1l362
  2823  0509  2CF9               	goto	i1l1005
  2824  050A                     i1l1009:	
  2825  050A  3001               	movlw	1
  2826  050B  00F5               	movwf	??___ftpack
  2827  050C  0875               	movf	??___ftpack,w
  2828  050D  07F3               	addwf	___ftpack@exp,f
  2829  050E  3001               	movlw	1
  2830  050F  07F0               	addwf	___ftpack@arg,f
  2831  0510  3000               	movlw	0
  2832  0511  1803               	skipnc
  2833  0512  3001               	movlw	1
  2834  0513  07F1               	addwf	___ftpack@arg+1,f
  2835  0514  3000               	movlw	0
  2836  0515  1803               	skipnc
  2837  0516  3001               	movlw	1
  2838  0517  07F2               	addwf	___ftpack@arg+2,f
  2839  0518  3001               	movlw	1
  2840  0519                     u60_25:	
  2841  0519  1003               	clrc
  2842  051A  0CF2               	rrf	___ftpack@arg+2,f
  2843  051B  0CF1               	rrf	___ftpack@arg+1,f
  2844  051C  0CF0               	rrf	___ftpack@arg,f
  2845  051D  3EFF               	addlw	-1
  2846  051E  1D03               	skipz
  2847  051F  2D19               	goto	u60_25
  2848  0520                     i1l362:	
  2849  0520  30FF               	movlw	255
  2850  0521  0572               	andwf	___ftpack@arg+2,w
  2851  0522  1903               	btfsc	3,2
  2852  0523  2D2F               	goto	i1l1017
  2853  0524  2D0A               	goto	i1l1009
  2854  0525                     i1l1015:	
  2855  0525  3001               	movlw	1
  2856  0526  02F3               	subwf	___ftpack@exp,f
  2857  0527  3001               	movlw	1
  2858  0528                     u62_25:	
  2859  0528  1003               	clrc
  2860  0529  0DF0               	rlf	___ftpack@arg,f
  2861  052A  0DF1               	rlf	___ftpack@arg+1,f
  2862  052B  0DF2               	rlf	___ftpack@arg+2,f
  2863  052C  3EFF               	addlw	-1
  2864  052D  1D03               	skipz
  2865  052E  2D28               	goto	u62_25
  2866  052F                     i1l1017:	
  2867  052F  1BF1               	btfsc	___ftpack@arg+1,7
  2868  0530  2D35               	goto	i1l369
  2869  0531  3002               	movlw	2
  2870  0532  0273               	subwf	___ftpack@exp,w
  2871  0533  1803               	skipnc
  2872  0534  2D25               	goto	i1l1015
  2873  0535                     i1l369:	
  2874  0535  1873               	btfsc	___ftpack@exp,0
  2875  0536  2D3D               	goto	i1l370
  2876  0537  30FF               	movlw	255
  2877  0538  05F0               	andwf	___ftpack@arg,f
  2878  0539  307F               	movlw	127
  2879  053A  05F1               	andwf	___ftpack@arg+1,f
  2880  053B  30FF               	movlw	255
  2881  053C  05F2               	andwf	___ftpack@arg+2,f
  2882  053D                     i1l370:	
  2883  053D  1003               	clrc
  2884  053E  0CF3               	rrf	___ftpack@exp,f
  2885  053F  0873               	movf	___ftpack@exp,w
  2886  0540  00F5               	movwf	??___ftpack
  2887  0541  01F6               	clrf	??___ftpack+1
  2888  0542  01F7               	clrf	??___ftpack+2
  2889  0543  3010               	movlw	16
  2890  0544                     u66_25:	
  2891  0544  1003               	clrc
  2892  0545  0DF5               	rlf	??___ftpack,f
  2893  0546  0DF6               	rlf	??___ftpack+1,f
  2894  0547  0DF7               	rlf	??___ftpack+2,f
  2895  0548  3EFF               	addlw	-1
  2896  0549  1D03               	skipz
  2897  054A  2D44               	goto	u66_25
  2898  054B  0875               	movf	??___ftpack,w
  2899  054C  04F0               	iorwf	___ftpack@arg,f
  2900  054D  0876               	movf	??___ftpack+1,w
  2901  054E  04F1               	iorwf	___ftpack@arg+1,f
  2902  054F  0877               	movf	??___ftpack+2,w
  2903  0550  04F2               	iorwf	___ftpack@arg+2,f
  2904  0551  0874               	movf	___ftpack@sign,w
  2905  0552  1903               	btfsc	3,2
  2906  0553  0008               	return
  2907  0554  17F2               	bsf	___ftpack@arg+2,7
  2908  0555  0008               	return
  2909  0556                     __end_of___ftpack:	
  2910  007E                     btemp	set	126	;btemp
  2911  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         50
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     52      54
    BANK1            80      8      60
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_convertMessageStringToSegments
    _runLEDSequence->_delay

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2660
                                              5 BANK1      3     3      0
     _convertMessageStringToSegments
                     _runLEDSequence
 ---------------------------------------------------------------------------------
 (1) _runLEDSequence                                       2     2      0     143
                                              2 BANK1      2     2      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                2     0      2      75
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _convertMessageStringToSegments                       5     5      0    2517
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0    6391
                                             46 BANK0      6     6      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     305
                                             32 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2100
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2054
                                             16 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             6     3      3    1865
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1668
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convertMessageStringToSegments
   _runLEDSequence
     _delay

 _ISR (ROOT)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      8      3C       5       75.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     34      36       3       67.5%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      80      10        0.0%
ABS                  0      0      80       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 19 16:04:01 2018

                                                 fsr 0004                                                  l995 060B  
                                                _ISR 03CA                                                  u555 0614  
                                                u685 01D8                                                  fsr0 0004  
                                                indf 0000                                                 ?_ISR 0070  
                                       ___ftdiv@cntr 003A                                         ___ftdiv@sign 003F  
                                               l1111 013B                                                 l1103 0119  
                                               l1031 0031                                                 l1131 0188  
                                               l1123 0166                                                 l1115 014C  
                                               l1107 012A                                                 l1051 0069  
                                               l1043 0057                                                 l1035 003D  
                                               l1151 0234                                                 l1135 0199  
                                               l1127 0177                                                 l1119 0155  
                                               l1071 00A7                                                 l1063 008D  
                                               l1055 007A                                                 l1047 0060  
                                               l1039 0046                                                 l1143 01B8  
                                               l1091 00F6                                                 l1083 00DF  
                                               l1075 00BD                                                 l1067 0096  
                                               l1059 008B                                                 l1149 01CE  
                                               l1095 00FF                                                 l1087 00E8  
                                               l1079 00CE                                                 l1167 05E1  
                                               l1159 05C6                                                 l1361 05A6  
                                               l1099 0108                                                 u1097 0598  
                                               i1l66 03EA                                                 _main 0556  
                                       ___ftpack@arg 0070                                         ___ftpack@exp 0073  
                                               btemp 007E                                                 start 0011  
                                       ___ftmul@cntr 002E                                         ___ftmul@sign 002F  
                                              ??_ISR 004E                                         ___fttol@exp1 004D  
                                       ___fttol@lval 0049                                                ?_main 0070  
                                      __CFG_WDTE$OFF 0000                                      __end_of___ftdiv 03CA  
                                              _ANSEL 011E                                      __end_of___ftmul 0313  
                                              _T1CON 0010                                      __end_of___fttol 04EA  
                                              i1l370 053D                                                i1l362 0520  
                                              i1l453 04D0                                                i1l369 0535  
                                              _TMR1H 000F                                                _TMR1L 000E  
                                              _PORTC 0007                                                u60_25 0519  
                                              u62_25 0528                                                _TRISC 0087  
                                              u66_25 0544                                                u58_25 04FE  
                                              u74_25 0353                                                u82_25 027B  
                                              _VRCON 0118                                                u75_25 0365  
                                              u91_25 02E7                                                u83_25 028D  
                                              u76_25 0387                                                u92_25 02EF  
                                              u77_25 0398                                                u78_25 03A6  
                                              u86_25 02BF                                                u87_25 02C7  
                                              u95_25 047D                                                u98_25 04A9  
                                      ___awtoft@sign 007D                                                _delay 0605  
                                      ___ftpack@sign 0074                                       __CFG_BOREN$OFF 0000  
                                              pclath 000A                                                status 0003  
                                              wtemp0 007E                      convertMessageStringToSegments@i 00D1  
                                     __CFG_MCLRE$OFF 0000                                      __initialization 0013  
                                  _isSequenceRunning 00CC                                         __end_of_main 05B4  
                                             ??_main 00D5                                        ___fttol@sign1 0048  
                                             ?_delay 00D0                              __size_of_runLEDSequence 0031  
                                   __end_of___awtoft 0605                                     __end_of___ftpack 0556  
                                             _ANSELH 011F                                               i1l1001 04F2  
                                             i1l1005 04F9                                               u101_25 04C7  
                                             i1l1015 0525                                               i1l1007 0505  
                                             i1l1017 052F                                               i1l1009 050A  
                                             i1l1215 03A5                                               i1l1207 0386  
                                             i1l1311 04E1                                               i1l1305 04C5  
                                             i1l1251 02BE                                               i1l1235 026F  
                                             i1l1307 04D3                                               i1l1403 044E  
                                             i1l1229 0259                                               i1l1263 02E6  
                                             i1l1247 02AE                                               i1l1177 05EF  
                                             i1l1193 0341                                               i1l1187 032B  
                                             i1l1259 02D6                                               i1l1279 0476  
                                             i1l1297 04A8                                               i1l1299 04B8  
                                             u106_25 03DF                                               u108_25 03F7  
                                          ??___ftdiv 0036                                            ??___ftmul 0026  
                                          ??___fttol 0044                                ___ftmul@f3_as_product 002B  
                                             saved_w 007E                              __end_of__initialization 0027  
                                         ___ftdiv@f1 0033                                           ___ftdiv@f2 0030  
                                         ___ftdiv@f3 003B                                           ___awtoft@c 0078  
                                         ___ftmul@f1 0020                                           ___ftmul@f2 0023  
                                         ___fttol@f1 0040                                       __pcstackCOMMON 0070  
                                       __pidataBANK1 0627                                        __end_of_delay 061F  
                                   _delayingVariable 00CE                                          ISR@duration 0052  
                              _lengthOfMessageString 00D8                                              ??_delay 00D2  
                                         __pbssBANK0 0054                                           __pbssBANK1 00A0  
                                         __pmaintext 0556                                           __pintentry 0004  
                                            _CM1CON0 0119                                            ?___awtoft 0078  
                                          ?___ftpack 0070                                       _runLEDSequence 05B4  
                                            ___ftdiv 0313                                              ___ftmul 0241  
                                            ___fttol 045C  convertMessageStringToSegments@indexOfLetterSegments 00D3  
                                         ??___awtoft 007B                                           ??___ftpack 0075  
                                            __ptext1 05B4                                              __ptext2 0605  
                                            __ptext3 002A                                              __ptext4 03CA  
                                            __ptext5 045C                                              __ptext6 0241  
                                            __ptext7 0313                                              __ptext8 05E5  
                                            __ptext9 04EA                                         __size_of_ISR 0092  
                                      _messageString 00C3                                            _T1CONbits 0010  
                             __end_of_runLEDSequence 05E5                                              clrloop0 0620  
                               end_of_initialization 0027                                       _timePerSegment 00DA  
                                          _TRISAbits 0085                                      ?_runLEDSequence 0070  
                                        _CM1CON0bits 0119                                          ___ftdiv@exp 003E  
                                        ___ftmul@exp 002A                                  start_initialization 0013  
                                        __end_of_ISR 045C                                      runLEDSequence@i 00D2  
             __end_of_convertMessageStringToSegments 0241              __size_of_convertMessageStringToSegments 0217  
                     _convertMessageStringToSegments 002A                                          __pdataBANK1 00DA  
                                  __size_of___awtoft 0020                                    __size_of___ftpack 006C  
                                          ___latbits 0001                                        __pcstackBANK0 0020  
                                      __pcstackBANK1 00D0                                            __pnvBANK1 00D8  
                                           ?___ftdiv 0030                                             ?___ftmul 0020  
                                           ?___fttol 0040                                       __size_of_delay 001A  
                                  interrupt_function 0004                                            clear_ram0 061F  
                                           _PIE2bits 008D                                             _PIR2bits 000D  
                                   ??_runLEDSequence 00D2                                       delay@delayTime 00D0  
                                   __size_of___ftdiv 00B7                                     __size_of___ftmul 00D2  
                                   __size_of___fttol 008E                                             ___awtoft 05E5  
                                     _letterSegments 00A0                                             ___ftpack 04EA  
                                      __size_of_main 005E                      ?_convertMessageStringToSegments 0070  
                   ??_convertMessageStringToSegments 00D0                                           _INTCONbits 000B  
                                    _lengthOfMessage 0054                                             intlevel1 0000  
                                  __CFG_FOSC$INTRCIO 0000  
